<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="6043"><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0165%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.0165%" y="245" width="0.0165%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2665%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="0.1158%" y="229" width="0.0165%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="1"/><text x="0.3658%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.20%)</title><rect x="0.1324%" y="229" width="0.1986%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="12"/><text x="0.3824%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.15%)</title><rect x="0.3310%" y="229" width="0.1489%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="9"/><text x="0.5810%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.07%)</title><rect x="0.9432%" y="213" width="0.0662%" height="15" fill="rgb(232,128,0)" fg:x="57" fg:w="4"/><text x="1.1932%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (4 samples, 0.07%)</title><rect x="1.0094%" y="213" width="0.0662%" height="15" fill="rgb(207,160,47)" fg:x="61" fg:w="4"/><text x="1.2594%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.05%)</title><rect x="1.0756%" y="213" width="0.0496%" height="15" fill="rgb(228,23,34)" fg:x="65" fg:w="3"/><text x="1.3256%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (58 samples, 0.96%)</title><rect x="0.4799%" y="229" width="0.9598%" height="15" fill="rgb(218,30,26)" fg:x="29" fg:w="58"/><text x="0.7299%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (19 samples, 0.31%)</title><rect x="1.1253%" y="213" width="0.3144%" height="15" fill="rgb(220,122,19)" fg:x="68" fg:w="19"/><text x="1.3753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="1.7541%" y="197" width="0.0165%" height="15" fill="rgb(250,228,42)" fg:x="106" fg:w="1"/><text x="2.0041%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.35%)</title><rect x="1.4397%" y="229" width="0.3475%" height="15" fill="rgb(240,193,28)" fg:x="87" fg:w="21"/><text x="1.6897%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.28%)</title><rect x="1.5059%" y="213" width="0.2813%" height="15" fill="rgb(216,20,37)" fg:x="91" fg:w="17"/><text x="1.7559%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="1.7706%" y="197" width="0.0165%" height="15" fill="rgb(206,188,39)" fg:x="107" fg:w="1"/><text x="2.0206%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (18 samples, 0.30%)</title><rect x="1.7872%" y="229" width="0.2979%" height="15" fill="rgb(217,207,13)" fg:x="108" fg:w="18"/><text x="2.0372%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (18 samples, 0.30%)</title><rect x="1.7872%" y="213" width="0.2979%" height="15" fill="rgb(231,73,38)" fg:x="108" fg:w="18"/><text x="2.0372%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.30%)</title><rect x="1.7872%" y="197" width="0.2979%" height="15" fill="rgb(225,20,46)" fg:x="108" fg:w="18"/><text x="2.0372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="2.0851%" y="229" width="0.0165%" height="15" fill="rgb(210,31,41)" fg:x="126" fg:w="1"/><text x="2.3351%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="2.1016%" y="229" width="0.0165%" height="15" fill="rgb(221,200,47)" fg:x="127" fg:w="1"/><text x="2.3516%" y="239.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;fontdue::font::Font&gt; (138 samples, 2.28%)</title><rect x="0.0331%" y="245" width="2.2836%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="138"/><text x="0.2831%" y="255.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.20%)</title><rect x="2.1182%" y="229" width="0.1986%" height="15" fill="rgb(249,33,26)" fg:x="128" fg:w="12"/><text x="2.3682%" y="239.50"></text></g><g><title>colors`foldhash::seed::gen_per_hasher_seed (1 samples, 0.02%)</title><rect x="2.3167%" y="245" width="0.0165%" height="15" fill="rgb(235,183,28)" fg:x="140" fg:w="1"/><text x="2.5667%" y="255.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (8 samples, 0.13%)</title><rect x="2.7139%" y="229" width="0.1324%" height="15" fill="rgb(221,5,38)" fg:x="164" fg:w="8"/><text x="2.9639%" y="239.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (16 samples, 0.26%)</title><rect x="2.8463%" y="229" width="0.2648%" height="15" fill="rgb(247,18,42)" fg:x="172" fg:w="16"/><text x="3.0963%" y="239.50"></text></g><g><title>colors`alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 0.12%)</title><rect x="3.1110%" y="229" width="0.1158%" height="15" fill="rgb(241,131,45)" fg:x="188" fg:w="7"/><text x="3.3610%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.10%)</title><rect x="10.2267%" y="181" width="0.0993%" height="15" fill="rgb(249,31,29)" fg:x="618" fg:w="6"/><text x="10.4767%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="10.4418%" y="165" width="0.0165%" height="15" fill="rgb(225,111,53)" fg:x="631" fg:w="1"/><text x="10.6918%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.12%)</title><rect x="10.4584%" y="165" width="0.1158%" height="15" fill="rgb(238,160,17)" fg:x="632" fg:w="7"/><text x="10.7084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.07%)</title><rect x="10.5080%" y="149" width="0.0662%" height="15" fill="rgb(214,148,48)" fg:x="635" fg:w="4"/><text x="10.7580%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="10.5577%" y="133" width="0.0165%" height="15" fill="rgb(232,36,49)" fg:x="638" fg:w="1"/><text x="10.8077%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="10.5577%" y="117" width="0.0165%" height="15" fill="rgb(209,103,24)" fg:x="638" fg:w="1"/><text x="10.8077%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.26%)</title><rect x="10.3260%" y="181" width="0.2648%" height="15" fill="rgb(229,88,8)" fg:x="624" fg:w="16"/><text x="10.5760%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="10.5742%" y="165" width="0.0165%" height="15" fill="rgb(213,181,19)" fg:x="639" fg:w="1"/><text x="10.8242%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (4 samples, 0.07%)</title><rect x="10.5908%" y="181" width="0.0662%" height="15" fill="rgb(254,191,54)" fg:x="640" fg:w="4"/><text x="10.8408%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.05%)</title><rect x="10.8224%" y="165" width="0.0496%" height="15" fill="rgb(241,83,37)" fg:x="654" fg:w="3"/><text x="11.0724%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (17 samples, 0.28%)</title><rect x="10.6570%" y="181" width="0.2813%" height="15" fill="rgb(233,36,39)" fg:x="644" fg:w="17"/><text x="10.9070%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.07%)</title><rect x="10.8721%" y="165" width="0.0662%" height="15" fill="rgb(226,3,54)" fg:x="657" fg:w="4"/><text x="11.1221%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="10.9217%" y="149" width="0.0165%" height="15" fill="rgb(245,192,40)" fg:x="660" fg:w="1"/><text x="11.1717%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (52 samples, 0.86%)</title><rect x="10.0943%" y="197" width="0.8605%" height="15" fill="rgb(238,167,29)" fg:x="610" fg:w="52"/><text x="10.3443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="10.9383%" y="181" width="0.0165%" height="15" fill="rgb(232,182,51)" fg:x="661" fg:w="1"/><text x="11.1883%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.08%)</title><rect x="10.9548%" y="197" width="0.0827%" height="15" fill="rgb(231,60,39)" fg:x="662" fg:w="5"/><text x="11.2048%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.05%)</title><rect x="11.0376%" y="197" width="0.0496%" height="15" fill="rgb(208,69,12)" fg:x="667" fg:w="3"/><text x="11.2876%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.08%)</title><rect x="11.0872%" y="197" width="0.0827%" height="15" fill="rgb(235,93,37)" fg:x="670" fg:w="5"/><text x="11.3372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (79 samples, 1.31%)</title><rect x="9.9785%" y="213" width="1.3073%" height="15" fill="rgb(213,116,39)" fg:x="603" fg:w="79"/><text x="10.2285%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.12%)</title><rect x="11.1699%" y="197" width="0.1158%" height="15" fill="rgb(222,207,29)" fg:x="675" fg:w="7"/><text x="11.4199%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.08%)</title><rect x="11.2030%" y="181" width="0.0827%" height="15" fill="rgb(206,96,30)" fg:x="677" fg:w="5"/><text x="11.4530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.15%)</title><rect x="11.2858%" y="213" width="0.1489%" height="15" fill="rgb(218,138,4)" fg:x="682" fg:w="9"/><text x="11.5358%" y="223.50"></text></g><g><title>colors`fontdue::math::Geometry::finalize (498 samples, 8.24%)</title><rect x="3.2269%" y="229" width="8.2409%" height="15" fill="rgb(250,191,14)" fg:x="195" fg:w="498"/><text x="3.4769%" y="239.50">colors`font..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.03%)</title><rect x="11.4347%" y="213" width="0.0331%" height="15" fill="rgb(239,60,40)" fg:x="691" fg:w="2"/><text x="11.6847%" y="223.50"></text></g><g><title>colors`fontdue::table::gsub::load_gsub (1 samples, 0.02%)</title><rect x="11.4678%" y="229" width="0.0165%" height="15" fill="rgb(206,27,48)" fg:x="693" fg:w="1"/><text x="11.7178%" y="239.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format4::Subtable4::codepoints (21 samples, 0.35%)</title><rect x="11.4844%" y="213" width="0.3475%" height="15" fill="rgb(225,35,8)" fg:x="694" fg:w="21"/><text x="11.7344%" y="223.50"></text></g><g><title>colors`ttf_parser::tables::cmap::Subtable::codepoints (88 samples, 1.46%)</title><rect x="11.4844%" y="229" width="1.4562%" height="15" fill="rgb(250,213,24)" fg:x="694" fg:w="88"/><text x="11.7344%" y="239.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format4::Subtable4::glyph_index (67 samples, 1.11%)</title><rect x="11.8319%" y="213" width="1.1087%" height="15" fill="rgb(247,123,22)" fg:x="715" fg:w="67"/><text x="12.0819%" y="223.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::close (1 samples, 0.02%)</title><rect x="19.7915%" y="213" width="0.0165%" height="15" fill="rgb(231,138,38)" fg:x="1196" fg:w="1"/><text x="20.0415%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="19.9239%" y="197" width="0.0165%" height="15" fill="rgb(231,145,46)" fg:x="1204" fg:w="1"/><text x="20.1739%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$malloc (3 samples, 0.05%)</title><rect x="20.4700%" y="165" width="0.0496%" height="15" fill="rgb(251,118,11)" fg:x="1237" fg:w="3"/><text x="20.7200%" y="175.50"></text></g><g><title>colors`__rdl_alloc (3 samples, 0.05%)</title><rect x="20.5196%" y="165" width="0.0496%" height="15" fill="rgb(217,147,25)" fg:x="1240" fg:w="3"/><text x="20.7696%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="20.5693%" y="149" width="0.0165%" height="15" fill="rgb(247,81,37)" fg:x="1243" fg:w="1"/><text x="20.8193%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="20.6023%" y="117" width="0.0165%" height="15" fill="rgb(209,12,38)" fg:x="1245" fg:w="1"/><text x="20.8523%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="20.6189%" y="117" width="0.0165%" height="15" fill="rgb(227,1,9)" fg:x="1246" fg:w="1"/><text x="20.8689%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.03%)</title><rect x="20.6354%" y="117" width="0.0331%" height="15" fill="rgb(248,47,43)" fg:x="1247" fg:w="2"/><text x="20.8854%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="20.6685%" y="117" width="0.0165%" height="15" fill="rgb(221,10,30)" fg:x="1249" fg:w="1"/><text x="20.9185%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="20.6851%" y="101" width="0.0331%" height="15" fill="rgb(210,229,1)" fg:x="1250" fg:w="2"/><text x="20.9351%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.03%)</title><rect x="20.7182%" y="85" width="0.0331%" height="15" fill="rgb(222,148,37)" fg:x="1252" fg:w="2"/><text x="20.9682%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.07%)</title><rect x="20.7513%" y="69" width="0.0662%" height="15" fill="rgb(234,67,33)" fg:x="1254" fg:w="4"/><text x="21.0013%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.18%)</title><rect x="20.6851%" y="117" width="0.1820%" height="15" fill="rgb(247,98,35)" fg:x="1250" fg:w="11"/><text x="20.9351%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.15%)</title><rect x="20.7182%" y="101" width="0.1489%" height="15" fill="rgb(247,138,52)" fg:x="1252" fg:w="9"/><text x="20.9682%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.12%)</title><rect x="20.7513%" y="85" width="0.1158%" height="15" fill="rgb(213,79,30)" fg:x="1254" fg:w="7"/><text x="21.0013%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="20.8175%" y="69" width="0.0496%" height="15" fill="rgb(246,177,23)" fg:x="1258" fg:w="3"/><text x="21.0675%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="20.8506%" y="53" width="0.0165%" height="15" fill="rgb(230,62,27)" fg:x="1260" fg:w="1"/><text x="21.1006%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.02%)</title><rect x="20.8671%" y="117" width="0.0165%" height="15" fill="rgb(216,154,8)" fg:x="1261" fg:w="1"/><text x="21.1171%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="20.8837%" y="117" width="0.0165%" height="15" fill="rgb(244,35,45)" fg:x="1262" fg:w="1"/><text x="21.1337%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="20.9002%" y="101" width="0.0165%" height="15" fill="rgb(251,115,12)" fg:x="1263" fg:w="1"/><text x="21.1502%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.05%)</title><rect x="20.9168%" y="101" width="0.0496%" height="15" fill="rgb(240,54,50)" fg:x="1264" fg:w="3"/><text x="21.1668%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="20.9333%" y="85" width="0.0331%" height="15" fill="rgb(233,84,52)" fg:x="1265" fg:w="2"/><text x="21.1833%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.12%)</title><rect x="20.9002%" y="117" width="0.1158%" height="15" fill="rgb(207,117,47)" fg:x="1263" fg:w="7"/><text x="21.1502%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="20.9664%" y="101" width="0.0496%" height="15" fill="rgb(249,43,39)" fg:x="1267" fg:w="3"/><text x="21.2164%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.05%)</title><rect x="20.9664%" y="85" width="0.0496%" height="15" fill="rgb(209,38,44)" fg:x="1267" fg:w="3"/><text x="21.2164%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.05%)</title><rect x="20.9664%" y="69" width="0.0496%" height="15" fill="rgb(236,212,23)" fg:x="1267" fg:w="3"/><text x="21.2164%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (29 samples, 0.48%)</title><rect x="20.5858%" y="133" width="0.4799%" height="15" fill="rgb(242,79,21)" fg:x="1244" fg:w="29"/><text x="20.8358%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="21.0161%" y="117" width="0.0496%" height="15" fill="rgb(211,96,35)" fg:x="1270" fg:w="3"/><text x="21.2661%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (30 samples, 0.50%)</title><rect x="20.5858%" y="149" width="0.4964%" height="15" fill="rgb(253,215,40)" fg:x="1244" fg:w="30"/><text x="20.8358%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="21.0657%" y="133" width="0.0165%" height="15" fill="rgb(211,81,21)" fg:x="1273" fg:w="1"/><text x="21.3157%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (8 samples, 0.13%)</title><rect x="21.0822%" y="149" width="0.1324%" height="15" fill="rgb(208,190,38)" fg:x="1274" fg:w="8"/><text x="21.3322%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.07%)</title><rect x="21.1484%" y="133" width="0.0662%" height="15" fill="rgb(235,213,38)" fg:x="1278" fg:w="4"/><text x="21.3984%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (42 samples, 0.70%)</title><rect x="20.5693%" y="165" width="0.6950%" height="15" fill="rgb(237,122,38)" fg:x="1243" fg:w="42"/><text x="20.8193%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="21.2146%" y="149" width="0.0496%" height="15" fill="rgb(244,218,35)" fg:x="1282" fg:w="3"/><text x="21.4646%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.07%)</title><rect x="21.2643%" y="165" width="0.0662%" height="15" fill="rgb(240,68,47)" fg:x="1285" fg:w="4"/><text x="21.5143%" y="175.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (93 samples, 1.54%)</title><rect x="19.8080%" y="213" width="1.5390%" height="15" fill="rgb(210,16,53)" fg:x="1197" fg:w="93"/><text x="20.0580%" y="223.50"></text></g><g><title>colors`fontdue::math::Geometry::push (85 samples, 1.41%)</title><rect x="19.9404%" y="197" width="1.4066%" height="15" fill="rgb(235,124,12)" fg:x="1205" fg:w="85"/><text x="20.1904%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (59 samples, 0.98%)</title><rect x="20.3707%" y="181" width="0.9763%" height="15" fill="rgb(224,169,11)" fg:x="1231" fg:w="59"/><text x="20.6207%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="21.3305%" y="165" width="0.0165%" height="15" fill="rgb(250,166,2)" fg:x="1289" fg:w="1"/><text x="21.5805%" y="175.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::move_to (2 samples, 0.03%)</title><rect x="21.3470%" y="213" width="0.0331%" height="15" fill="rgb(242,216,29)" fg:x="1290" fg:w="2"/><text x="21.5970%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$realloc (2 samples, 0.03%)</title><rect x="26.1956%" y="181" width="0.0331%" height="15" fill="rgb(230,116,27)" fg:x="1583" fg:w="2"/><text x="26.4456%" y="191.50"></text></g><g><title>colors`__rdl_realloc (5 samples, 0.08%)</title><rect x="26.2287%" y="181" width="0.0827%" height="15" fill="rgb(228,99,48)" fg:x="1585" fg:w="5"/><text x="26.4787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.05%)</title><rect x="26.4438%" y="165" width="0.0496%" height="15" fill="rgb(253,11,6)" fg:x="1598" fg:w="3"/><text x="26.6938%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.10%)</title><rect x="27.7842%" y="133" width="0.0993%" height="15" fill="rgb(247,143,39)" fg:x="1679" fg:w="6"/><text x="28.0342%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.18%)</title><rect x="27.8835%" y="133" width="0.1820%" height="15" fill="rgb(236,97,10)" fg:x="1685" fg:w="11"/><text x="28.1335%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.70%)</title><rect x="28.0655%" y="133" width="0.6950%" height="15" fill="rgb(233,208,19)" fg:x="1696" fg:w="42"/><text x="28.3155%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (7 samples, 0.12%)</title><rect x="28.9922%" y="117" width="0.1158%" height="15" fill="rgb(216,164,2)" fg:x="1752" fg:w="7"/><text x="29.2422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (68 samples, 1.13%)</title><rect x="29.1081%" y="117" width="1.1253%" height="15" fill="rgb(220,129,5)" fg:x="1759" fg:w="68"/><text x="29.3581%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (55 samples, 0.91%)</title><rect x="30.2333%" y="117" width="0.9101%" height="15" fill="rgb(242,17,10)" fg:x="1827" fg:w="55"/><text x="30.4833%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.03%)</title><rect x="31.1435%" y="117" width="0.0331%" height="15" fill="rgb(242,107,0)" fg:x="1882" fg:w="2"/><text x="31.3935%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (151 samples, 2.50%)</title><rect x="28.7605%" y="133" width="2.4988%" height="15" fill="rgb(251,28,31)" fg:x="1738" fg:w="151"/><text x="29.0105%" y="143.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.08%)</title><rect x="31.1766%" y="117" width="0.0827%" height="15" fill="rgb(233,223,10)" fg:x="1884" fg:w="5"/><text x="31.4266%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (281 samples, 4.65%)</title><rect x="26.8741%" y="149" width="4.6500%" height="15" fill="rgb(215,21,27)" fg:x="1624" fg:w="281"/><text x="27.1241%" y="159.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.26%)</title><rect x="31.2593%" y="133" width="0.2648%" height="15" fill="rgb(232,23,21)" fg:x="1889" fg:w="16"/><text x="31.5093%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.05%)</title><rect x="31.5241%" y="149" width="0.0496%" height="15" fill="rgb(244,5,23)" fg:x="1905" fg:w="3"/><text x="31.7741%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (318 samples, 5.26%)</title><rect x="26.4935%" y="165" width="5.2623%" height="15" fill="rgb(226,81,46)" fg:x="1601" fg:w="318"/><text x="26.7435%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.18%)</title><rect x="31.5737%" y="149" width="0.1820%" height="15" fill="rgb(247,70,30)" fg:x="1908" fg:w="11"/><text x="31.8237%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (369 samples, 6.11%)</title><rect x="26.3114%" y="181" width="6.1062%" height="15" fill="rgb(212,68,19)" fg:x="1590" fg:w="369"/><text x="26.5614%" y="191.50">colors`a..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (40 samples, 0.66%)</title><rect x="31.7558%" y="165" width="0.6619%" height="15" fill="rgb(240,187,13)" fg:x="1919" fg:w="40"/><text x="32.0058%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (406 samples, 6.72%)</title><rect x="25.8812%" y="197" width="6.7185%" height="15" fill="rgb(223,113,26)" fg:x="1564" fg:w="406"/><text x="26.1312%" y="207.50">colors`al..</text></g><g><title>libsystem_malloc.dylib`_realloc (11 samples, 0.18%)</title><rect x="32.4177%" y="181" width="0.1820%" height="15" fill="rgb(206,192,2)" fg:x="1959" fg:w="11"/><text x="32.6677%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (6 samples, 0.10%)</title><rect x="32.5997%" y="197" width="0.0993%" height="15" fill="rgb(241,108,4)" fg:x="1970" fg:w="6"/><text x="32.8497%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$realloc (2 samples, 0.03%)</title><rect x="34.4531%" y="165" width="0.0331%" height="15" fill="rgb(247,173,49)" fg:x="2082" fg:w="2"/><text x="34.7031%" y="175.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.03%)</title><rect x="34.4862%" y="165" width="0.0331%" height="15" fill="rgb(224,114,35)" fg:x="2084" fg:w="2"/><text x="34.7362%" y="175.50"></text></g><g><title>colors`__rdl_realloc (1 samples, 0.02%)</title><rect x="34.5193%" y="165" width="0.0165%" height="15" fill="rgb(245,159,27)" fg:x="2086" fg:w="1"/><text x="34.7693%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.03%)</title><rect x="34.5689%" y="149" width="0.0331%" height="15" fill="rgb(245,172,44)" fg:x="2089" fg:w="2"/><text x="34.8189%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.12%)</title><rect x="34.7510%" y="117" width="0.1158%" height="15" fill="rgb(236,23,11)" fg:x="2100" fg:w="7"/><text x="35.0010%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="34.9330%" y="101" width="0.0331%" height="15" fill="rgb(205,117,38)" fg:x="2111" fg:w="2"/><text x="35.1830%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="34.9992%" y="85" width="0.0165%" height="15" fill="rgb(237,72,25)" fg:x="2115" fg:w="1"/><text x="35.2492%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="35.0323%" y="69" width="0.0165%" height="15" fill="rgb(244,70,9)" fg:x="2117" fg:w="1"/><text x="35.2823%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.07%)</title><rect x="35.0488%" y="69" width="0.0662%" height="15" fill="rgb(217,125,39)" fg:x="2118" fg:w="4"/><text x="35.2988%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.26%)</title><rect x="34.9661%" y="101" width="0.2648%" height="15" fill="rgb(235,36,10)" fg:x="2113" fg:w="16"/><text x="35.2161%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.22%)</title><rect x="35.0157%" y="85" width="0.2151%" height="15" fill="rgb(251,123,47)" fg:x="2116" fg:w="13"/><text x="35.2657%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.12%)</title><rect x="35.1150%" y="69" width="0.1158%" height="15" fill="rgb(221,13,13)" fg:x="2122" fg:w="7"/><text x="35.3650%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="35.2143%" y="53" width="0.0165%" height="15" fill="rgb(238,131,9)" fg:x="2128" fg:w="1"/><text x="35.4643%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="35.2308%" y="101" width="0.0165%" height="15" fill="rgb(211,50,8)" fg:x="2129" fg:w="1"/><text x="35.4808%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (26 samples, 0.43%)</title><rect x="34.8668%" y="117" width="0.4302%" height="15" fill="rgb(245,182,24)" fg:x="2107" fg:w="26"/><text x="35.1168%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.05%)</title><rect x="35.2474%" y="101" width="0.0496%" height="15" fill="rgb(242,14,37)" fg:x="2130" fg:w="3"/><text x="35.4974%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="35.2970%" y="117" width="0.0165%" height="15" fill="rgb(246,228,12)" fg:x="2133" fg:w="1"/><text x="35.5470%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="35.3136%" y="117" width="0.0165%" height="15" fill="rgb(213,55,15)" fg:x="2134" fg:w="1"/><text x="35.5636%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (3 samples, 0.05%)</title><rect x="35.4294%" y="85" width="0.0496%" height="15" fill="rgb(209,9,3)" fg:x="2141" fg:w="3"/><text x="35.6794%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.18%)</title><rect x="35.4129%" y="101" width="0.1820%" height="15" fill="rgb(230,59,30)" fg:x="2140" fg:w="11"/><text x="35.6629%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.12%)</title><rect x="35.4791%" y="85" width="0.1158%" height="15" fill="rgb(209,121,21)" fg:x="2144" fg:w="7"/><text x="35.7291%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="35.5949%" y="101" width="0.0331%" height="15" fill="rgb(220,109,13)" fg:x="2151" fg:w="2"/><text x="35.8449%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="35.6280%" y="101" width="0.0165%" height="15" fill="rgb(232,18,1)" fg:x="2153" fg:w="1"/><text x="35.8780%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.07%)</title><rect x="35.6445%" y="101" width="0.0662%" height="15" fill="rgb(215,41,42)" fg:x="2154" fg:w="4"/><text x="35.8945%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.05%)</title><rect x="35.8266%" y="85" width="0.0496%" height="15" fill="rgb(224,123,36)" fg:x="2165" fg:w="3"/><text x="36.0766%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="35.8762%" y="85" width="0.0165%" height="15" fill="rgb(240,125,3)" fg:x="2168" fg:w="1"/><text x="36.1262%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="35.8928%" y="85" width="0.0331%" height="15" fill="rgb(205,98,50)" fg:x="2169" fg:w="2"/><text x="36.1428%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (16 samples, 0.26%)</title><rect x="35.7107%" y="101" width="0.2648%" height="15" fill="rgb(205,185,37)" fg:x="2158" fg:w="16"/><text x="35.9607%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.05%)</title><rect x="35.9259%" y="85" width="0.0496%" height="15" fill="rgb(238,207,15)" fg:x="2171" fg:w="3"/><text x="36.1759%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.05%)</title><rect x="35.9755%" y="85" width="0.0496%" height="15" fill="rgb(213,199,42)" fg:x="2174" fg:w="3"/><text x="36.2255%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="36.0252%" y="85" width="0.0165%" height="15" fill="rgb(235,201,11)" fg:x="2177" fg:w="1"/><text x="36.2752%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="36.0913%" y="69" width="0.0331%" height="15" fill="rgb(207,46,11)" fg:x="2181" fg:w="2"/><text x="36.3413%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.18%)</title><rect x="35.9755%" y="101" width="0.1820%" height="15" fill="rgb(241,35,35)" fg:x="2174" fg:w="11"/><text x="36.2255%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.12%)</title><rect x="36.0417%" y="85" width="0.1158%" height="15" fill="rgb(243,32,47)" fg:x="2178" fg:w="7"/><text x="36.2917%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.03%)</title><rect x="36.1244%" y="69" width="0.0331%" height="15" fill="rgb(247,202,23)" fg:x="2183" fg:w="2"/><text x="36.3744%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.03%)</title><rect x="36.1244%" y="53" width="0.0331%" height="15" fill="rgb(219,102,11)" fg:x="2183" fg:w="2"/><text x="36.3744%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.10%)</title><rect x="36.1575%" y="101" width="0.0993%" height="15" fill="rgb(243,110,44)" fg:x="2185" fg:w="6"/><text x="36.4075%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.07%)</title><rect x="36.1906%" y="85" width="0.0662%" height="15" fill="rgb(222,74,54)" fg:x="2187" fg:w="4"/><text x="36.4406%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="36.2568%" y="101" width="0.0165%" height="15" fill="rgb(216,99,12)" fg:x="2191" fg:w="1"/><text x="36.5068%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (59 samples, 0.98%)</title><rect x="35.3301%" y="117" width="0.9763%" height="15" fill="rgb(226,22,26)" fg:x="2135" fg:w="59"/><text x="35.5801%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="36.2734%" y="101" width="0.0331%" height="15" fill="rgb(217,163,10)" fg:x="2192" fg:w="2"/><text x="36.5234%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="36.3065%" y="117" width="0.0165%" height="15" fill="rgb(213,25,53)" fg:x="2194" fg:w="1"/><text x="36.5565%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (106 samples, 1.75%)</title><rect x="34.6682%" y="133" width="1.7541%" height="15" fill="rgb(252,105,26)" fg:x="2095" fg:w="106"/><text x="34.9182%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.10%)</title><rect x="36.3230%" y="117" width="0.0993%" height="15" fill="rgb(220,39,43)" fg:x="2195" fg:w="6"/><text x="36.5730%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="36.4223%" y="133" width="0.0165%" height="15" fill="rgb(229,68,48)" fg:x="2201" fg:w="1"/><text x="36.6723%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.07%)</title><rect x="36.4389%" y="133" width="0.0662%" height="15" fill="rgb(252,8,32)" fg:x="2202" fg:w="4"/><text x="36.6889%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.07%)</title><rect x="36.5050%" y="133" width="0.0662%" height="15" fill="rgb(223,20,43)" fg:x="2206" fg:w="4"/><text x="36.7550%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.03%)</title><rect x="36.5712%" y="133" width="0.0331%" height="15" fill="rgb(229,81,49)" fg:x="2210" fg:w="2"/><text x="36.8212%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (131 samples, 2.17%)</title><rect x="34.6020%" y="149" width="2.1678%" height="15" fill="rgb(236,28,36)" fg:x="2091" fg:w="131"/><text x="34.8520%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.17%)</title><rect x="36.6043%" y="133" width="0.1655%" height="15" fill="rgb(249,185,26)" fg:x="2212" fg:w="10"/><text x="36.8543%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.15%)</title><rect x="36.6209%" y="117" width="0.1489%" height="15" fill="rgb(249,174,33)" fg:x="2213" fg:w="9"/><text x="36.8709%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (8 samples, 0.13%)</title><rect x="36.7698%" y="149" width="0.1324%" height="15" fill="rgb(233,201,37)" fg:x="2222" fg:w="8"/><text x="37.0198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.07%)</title><rect x="36.8360%" y="133" width="0.0662%" height="15" fill="rgb(221,78,26)" fg:x="2226" fg:w="4"/><text x="37.0860%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="36.8857%" y="117" width="0.0165%" height="15" fill="rgb(250,127,30)" fg:x="2229" fg:w="1"/><text x="37.1357%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.12%)</title><rect x="36.9022%" y="149" width="0.1158%" height="15" fill="rgb(230,49,44)" fg:x="2230" fg:w="7"/><text x="37.1522%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (165 samples, 2.73%)</title><rect x="34.3042%" y="181" width="2.7304%" height="15" fill="rgb(229,67,23)" fg:x="2073" fg:w="165"/><text x="34.5542%" y="191.50">co..</text></g><g><title>colors`alloc::raw_vec::finish_grow (151 samples, 2.50%)</title><rect x="34.5358%" y="165" width="2.4988%" height="15" fill="rgb(249,83,47)" fg:x="2087" fg:w="151"/><text x="34.7858%" y="175.50">co..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="37.0180%" y="149" width="0.0165%" height="15" fill="rgb(215,43,3)" fg:x="2237" fg:w="1"/><text x="37.2680%" y="159.50"></text></g><g><title>colors`fontdue::math::Geometry::push (263 samples, 4.35%)</title><rect x="32.6990%" y="197" width="4.3521%" height="15" fill="rgb(238,154,13)" fg:x="1976" fg:w="263"/><text x="32.9490%" y="207.50">color..</text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="37.0346%" y="181" width="0.0165%" height="15" fill="rgb(219,56,2)" fg:x="2238" fg:w="1"/><text x="37.2846%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (8 samples, 0.13%)</title><rect x="37.0511%" y="197" width="0.1324%" height="15" fill="rgb(233,0,4)" fg:x="2239" fg:w="8"/><text x="37.3011%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (102 samples, 1.69%)</title><rect x="37.1835%" y="197" width="1.6879%" height="15" fill="rgb(235,30,7)" fg:x="2247" fg:w="102"/><text x="37.4335%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (51 samples, 0.84%)</title><rect x="38.8714%" y="197" width="0.8440%" height="15" fill="rgb(250,79,13)" fg:x="2349" fg:w="51"/><text x="39.1214%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (7 samples, 0.12%)</title><rect x="39.7154%" y="197" width="0.1158%" height="15" fill="rgb(211,146,34)" fg:x="2400" fg:w="7"/><text x="39.9654%" y="207.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (1,129 samples, 18.68%)</title><rect x="21.3801%" y="213" width="18.6828%" height="15" fill="rgb(228,22,38)" fg:x="1292" fg:w="1129"/><text x="21.6301%" y="223.50">colors`&lt;fontdue::math::Geomet..</text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.23%)</title><rect x="39.8312%" y="197" width="0.2317%" height="15" fill="rgb(235,168,5)" fg:x="2407" fg:w="14"/><text x="40.0812%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$free (5 samples, 0.08%)</title><rect x="40.0629%" y="213" width="0.0827%" height="15" fill="rgb(221,155,16)" fg:x="2421" fg:w="5"/><text x="40.3129%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="40.1456%" y="213" width="0.0165%" height="15" fill="rgb(215,215,53)" fg:x="2426" fg:w="1"/><text x="40.3956%" y="223.50"></text></g><g><title>colors`__rdl_alloc (21 samples, 0.35%)</title><rect x="40.1622%" y="213" width="0.3475%" height="15" fill="rgb(223,4,10)" fg:x="2427" fg:w="21"/><text x="40.4122%" y="223.50"></text></g><g><title>colors`__rust_alloc (4 samples, 0.07%)</title><rect x="40.5097%" y="213" width="0.0662%" height="15" fill="rgb(234,103,6)" fg:x="2448" fg:w="4"/><text x="40.7597%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7 samples, 0.12%)</title><rect x="40.5759%" y="213" width="0.1158%" height="15" fill="rgb(227,97,0)" fg:x="2452" fg:w="7"/><text x="40.8259%" y="223.50"></text></g><g><title>colors`fontdue::math::Geometry::push (247 samples, 4.09%)</title><rect x="40.6917%" y="213" width="4.0874%" height="15" fill="rgb(234,150,53)" fg:x="2459" fg:w="247"/><text x="40.9417%" y="223.50">colo..</text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::close (1 samples, 0.02%)</title><rect x="54.8569%" y="197" width="0.0165%" height="15" fill="rgb(228,201,54)" fg:x="3315" fg:w="1"/><text x="55.1069%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="54.8734%" y="181" width="0.0165%" height="15" fill="rgb(222,22,37)" fg:x="3316" fg:w="1"/><text x="55.1234%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="55.5022%" y="149" width="0.0331%" height="15" fill="rgb(237,53,32)" fg:x="3354" fg:w="2"/><text x="55.7522%" y="159.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.03%)</title><rect x="55.5353%" y="149" width="0.0331%" height="15" fill="rgb(233,25,53)" fg:x="3356" fg:w="2"/><text x="55.7853%" y="159.50"></text></g><g><title>colors`__rdl_realloc (1 samples, 0.02%)</title><rect x="55.5684%" y="149" width="0.0165%" height="15" fill="rgb(210,40,34)" fg:x="3358" fg:w="1"/><text x="55.8184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="55.6512%" y="101" width="0.0165%" height="15" fill="rgb(241,220,44)" fg:x="3363" fg:w="1"/><text x="55.9012%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.05%)</title><rect x="55.6677%" y="101" width="0.0496%" height="15" fill="rgb(235,28,35)" fg:x="3364" fg:w="3"/><text x="55.9177%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="55.7174%" y="85" width="0.0827%" height="15" fill="rgb(210,56,17)" fg:x="3367" fg:w="5"/><text x="55.9674%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.03%)</title><rect x="55.8166%" y="69" width="0.0331%" height="15" fill="rgb(224,130,29)" fg:x="3373" fg:w="2"/><text x="56.0666%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (19 samples, 0.31%)</title><rect x="55.7174%" y="101" width="0.3144%" height="15" fill="rgb(235,212,8)" fg:x="3367" fg:w="19"/><text x="55.9674%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.23%)</title><rect x="55.8001%" y="85" width="0.2317%" height="15" fill="rgb(223,33,50)" fg:x="3372" fg:w="14"/><text x="56.0501%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.18%)</title><rect x="55.8497%" y="69" width="0.1820%" height="15" fill="rgb(219,149,13)" fg:x="3375" fg:w="11"/><text x="56.0997%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.15%)</title><rect x="55.8828%" y="53" width="0.1489%" height="15" fill="rgb(250,156,29)" fg:x="3377" fg:w="9"/><text x="56.1328%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="56.0152%" y="37" width="0.0165%" height="15" fill="rgb(216,193,19)" fg:x="3385" fg:w="1"/><text x="56.2652%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="56.0318%" y="85" width="0.0165%" height="15" fill="rgb(216,135,14)" fg:x="3386" fg:w="1"/><text x="56.2818%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="56.0318%" y="69" width="0.0165%" height="15" fill="rgb(241,47,5)" fg:x="3386" fg:w="1"/><text x="56.2818%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="56.0483%" y="85" width="0.0165%" height="15" fill="rgb(233,42,35)" fg:x="3387" fg:w="1"/><text x="56.2983%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="56.0649%" y="69" width="0.0165%" height="15" fill="rgb(231,13,6)" fg:x="3388" fg:w="1"/><text x="56.3149%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="56.0649%" y="85" width="0.0331%" height="15" fill="rgb(207,181,40)" fg:x="3388" fg:w="2"/><text x="56.3149%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="56.0814%" y="69" width="0.0165%" height="15" fill="rgb(254,173,49)" fg:x="3389" fg:w="1"/><text x="56.3314%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="56.0814%" y="53" width="0.0165%" height="15" fill="rgb(221,1,38)" fg:x="3389" fg:w="1"/><text x="56.3314%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.10%)</title><rect x="56.0318%" y="101" width="0.0993%" height="15" fill="rgb(206,124,46)" fg:x="3386" fg:w="6"/><text x="56.2818%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.03%)</title><rect x="56.0980%" y="85" width="0.0331%" height="15" fill="rgb(249,21,11)" fg:x="3390" fg:w="2"/><text x="56.3480%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="56.1145%" y="69" width="0.0165%" height="15" fill="rgb(222,201,40)" fg:x="3391" fg:w="1"/><text x="56.3645%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (35 samples, 0.58%)</title><rect x="55.6346%" y="117" width="0.5792%" height="15" fill="rgb(235,61,29)" fg:x="3362" fg:w="35"/><text x="55.8846%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.08%)</title><rect x="56.1311%" y="101" width="0.0827%" height="15" fill="rgb(219,207,3)" fg:x="3392" fg:w="5"/><text x="56.3811%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="56.2138%" y="117" width="0.0165%" height="15" fill="rgb(222,56,46)" fg:x="3397" fg:w="1"/><text x="56.4638%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="56.2303%" y="117" width="0.0165%" height="15" fill="rgb(239,76,54)" fg:x="3398" fg:w="1"/><text x="56.4803%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="56.2469%" y="117" width="0.0165%" height="15" fill="rgb(231,124,27)" fg:x="3399" fg:w="1"/><text x="56.4969%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (40 samples, 0.66%)</title><rect x="55.6181%" y="133" width="0.6619%" height="15" fill="rgb(249,195,6)" fg:x="3361" fg:w="40"/><text x="55.8681%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="56.2634%" y="117" width="0.0165%" height="15" fill="rgb(237,174,47)" fg:x="3400" fg:w="1"/><text x="56.5134%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (10 samples, 0.17%)</title><rect x="56.2800%" y="133" width="0.1655%" height="15" fill="rgb(206,201,31)" fg:x="3401" fg:w="10"/><text x="56.5300%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.08%)</title><rect x="56.3627%" y="117" width="0.0827%" height="15" fill="rgb(231,57,52)" fg:x="3406" fg:w="5"/><text x="56.6127%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.03%)</title><rect x="56.4124%" y="101" width="0.0331%" height="15" fill="rgb(248,177,22)" fg:x="3409" fg:w="2"/><text x="56.6624%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (55 samples, 0.91%)</title><rect x="55.5850%" y="149" width="0.9101%" height="15" fill="rgb(215,211,37)" fg:x="3359" fg:w="55"/><text x="55.8350%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="56.4455%" y="133" width="0.0496%" height="15" fill="rgb(241,128,51)" fg:x="3411" fg:w="3"/><text x="56.6955%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.07%)</title><rect x="56.4951%" y="149" width="0.0662%" height="15" fill="rgb(227,165,31)" fg:x="3414" fg:w="4"/><text x="56.7451%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (77 samples, 1.27%)</title><rect x="55.3368%" y="165" width="1.2742%" height="15" fill="rgb(228,167,24)" fg:x="3344" fg:w="77"/><text x="55.5868%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.05%)</title><rect x="56.5613%" y="149" width="0.0496%" height="15" fill="rgb(228,143,12)" fg:x="3418" fg:w="3"/><text x="56.8113%" y="159.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (108 samples, 1.79%)</title><rect x="54.8734%" y="197" width="1.7872%" height="15" fill="rgb(249,149,8)" fg:x="3316" fg:w="108"/><text x="55.1234%" y="207.50">c..</text></g><g><title>colors`fontdue::math::Geometry::push (107 samples, 1.77%)</title><rect x="54.8900%" y="181" width="1.7706%" height="15" fill="rgb(243,35,44)" fg:x="3317" fg:w="107"/><text x="55.1400%" y="191.50">c..</text></g><g><title>colors`alloc::raw_vec::finish_grow (3 samples, 0.05%)</title><rect x="56.6110%" y="165" width="0.0496%" height="15" fill="rgb(246,89,9)" fg:x="3421" fg:w="3"/><text x="56.8610%" y="175.50"></text></g><g><title>colors`DYLD-STUB$$realloc (13 samples, 0.22%)</title><rect x="62.9158%" y="165" width="0.2151%" height="15" fill="rgb(233,213,13)" fg:x="3802" fg:w="13"/><text x="63.1658%" y="175.50"></text></g><g><title>colors`__rdl_realloc (9 samples, 0.15%)</title><rect x="63.1309%" y="165" width="0.1489%" height="15" fill="rgb(233,141,41)" fg:x="3815" fg:w="9"/><text x="63.3809%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (11 samples, 0.18%)</title><rect x="63.5280%" y="149" width="0.1820%" height="15" fill="rgb(239,167,4)" fg:x="3839" fg:w="11"/><text x="63.7780%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.18%)</title><rect x="65.6462%" y="117" width="0.1820%" height="15" fill="rgb(209,217,16)" fg:x="3967" fg:w="11"/><text x="65.8962%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.33%)</title><rect x="65.8282%" y="117" width="0.3310%" height="15" fill="rgb(219,88,35)" fg:x="3978" fg:w="20"/><text x="66.0782%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (69 samples, 1.14%)</title><rect x="66.1592%" y="117" width="1.1418%" height="15" fill="rgb(220,193,23)" fg:x="3998" fg:w="69"/><text x="66.4092%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (11 samples, 0.18%)</title><rect x="67.8140%" y="101" width="0.1820%" height="15" fill="rgb(230,90,52)" fg:x="4098" fg:w="11"/><text x="68.0640%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (117 samples, 1.94%)</title><rect x="67.9960%" y="101" width="1.9361%" height="15" fill="rgb(252,106,19)" fg:x="4109" fg:w="117"/><text x="68.2460%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (87 samples, 1.44%)</title><rect x="69.9322%" y="101" width="1.4397%" height="15" fill="rgb(206,74,20)" fg:x="4226" fg:w="87"/><text x="70.1822%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (265 samples, 4.39%)</title><rect x="67.3010%" y="117" width="4.3852%" height="15" fill="rgb(230,138,44)" fg:x="4067" fg:w="265"/><text x="67.5510%" y="127.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.31%)</title><rect x="71.3718%" y="101" width="0.3144%" height="15" fill="rgb(235,182,43)" fg:x="4313" fg:w="19"/><text x="71.6218%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (476 samples, 7.88%)</title><rect x="64.4216%" y="133" width="7.8769%" height="15" fill="rgb(242,16,51)" fg:x="3893" fg:w="476"/><text x="64.6716%" y="143.50">libsystem_m..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.61%)</title><rect x="71.6862%" y="117" width="0.6123%" height="15" fill="rgb(248,9,4)" fg:x="4332" fg:w="37"/><text x="71.9362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (9 samples, 0.15%)</title><rect x="72.2985%" y="133" width="0.1489%" height="15" fill="rgb(210,31,22)" fg:x="4369" fg:w="9"/><text x="72.5485%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (551 samples, 9.12%)</title><rect x="63.7101%" y="149" width="9.1180%" height="15" fill="rgb(239,54,39)" fg:x="3850" fg:w="551"/><text x="63.9601%" y="159.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (23 samples, 0.38%)</title><rect x="72.4475%" y="133" width="0.3806%" height="15" fill="rgb(230,99,41)" fg:x="4378" fg:w="23"/><text x="72.6975%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (647 samples, 10.71%)</title><rect x="63.2798%" y="165" width="10.7066%" height="15" fill="rgb(253,106,12)" fg:x="3824" fg:w="647"/><text x="63.5298%" y="175.50">colors`alloc::ra..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (70 samples, 1.16%)</title><rect x="72.8281%" y="149" width="1.1584%" height="15" fill="rgb(213,46,41)" fg:x="4401" fg:w="70"/><text x="73.0781%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (741 samples, 12.26%)</title><rect x="62.3200%" y="181" width="12.2621%" height="15" fill="rgb(215,133,35)" fg:x="3766" fg:w="741"/><text x="62.5700%" y="191.50">colors`alloc::raw_..</text></g><g><title>libsystem_malloc.dylib`_realloc (36 samples, 0.60%)</title><rect x="73.9864%" y="165" width="0.5957%" height="15" fill="rgb(213,28,5)" fg:x="4471" fg:w="36"/><text x="74.2364%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (8 samples, 0.13%)</title><rect x="74.5822%" y="181" width="0.1324%" height="15" fill="rgb(215,77,49)" fg:x="4507" fg:w="8"/><text x="74.8322%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$realloc (2 samples, 0.03%)</title><rect x="78.0242%" y="149" width="0.0331%" height="15" fill="rgb(248,100,22)" fg:x="4715" fg:w="2"/><text x="78.2742%" y="159.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="78.0573%" y="149" width="0.0165%" height="15" fill="rgb(208,67,9)" fg:x="4717" fg:w="1"/><text x="78.3073%" y="159.50"></text></g><g><title>colors`__rdl_realloc (4 samples, 0.07%)</title><rect x="78.0738%" y="149" width="0.0662%" height="15" fill="rgb(219,133,21)" fg:x="4718" fg:w="4"/><text x="78.3238%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.03%)</title><rect x="78.1731%" y="133" width="0.0331%" height="15" fill="rgb(246,46,29)" fg:x="4724" fg:w="2"/><text x="78.4231%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="78.4875%" y="101" width="0.0331%" height="15" fill="rgb(246,185,52)" fg:x="4743" fg:w="2"/><text x="78.7375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="78.5206%" y="101" width="0.0165%" height="15" fill="rgb(252,136,11)" fg:x="4745" fg:w="1"/><text x="78.7706%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.05%)</title><rect x="78.5372%" y="101" width="0.0496%" height="15" fill="rgb(219,138,53)" fg:x="4746" fg:w="3"/><text x="78.7872%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="78.6530%" y="85" width="0.0827%" height="15" fill="rgb(211,51,23)" fg:x="4753" fg:w="5"/><text x="78.9030%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="78.7523%" y="69" width="0.0165%" height="15" fill="rgb(247,221,28)" fg:x="4759" fg:w="1"/><text x="79.0023%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="78.8019%" y="53" width="0.0165%" height="15" fill="rgb(251,222,45)" fg:x="4762" fg:w="1"/><text x="79.0519%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.18%)</title><rect x="78.7357%" y="85" width="0.1820%" height="15" fill="rgb(217,162,53)" fg:x="4758" fg:w="11"/><text x="78.9857%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.15%)</title><rect x="78.7688%" y="69" width="0.1489%" height="15" fill="rgb(229,93,14)" fg:x="4760" fg:w="9"/><text x="79.0188%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.10%)</title><rect x="78.8185%" y="53" width="0.0993%" height="15" fill="rgb(209,67,49)" fg:x="4763" fg:w="6"/><text x="79.0685%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.03%)</title><rect x="78.8847%" y="37" width="0.0331%" height="15" fill="rgb(213,87,29)" fg:x="4767" fg:w="2"/><text x="79.1347%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.35%)</title><rect x="78.5868%" y="101" width="0.3475%" height="15" fill="rgb(205,151,52)" fg:x="4749" fg:w="21"/><text x="78.8368%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="78.9178%" y="85" width="0.0165%" height="15" fill="rgb(253,215,39)" fg:x="4769" fg:w="1"/><text x="79.1678%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.07%)</title><rect x="78.9343%" y="101" width="0.0662%" height="15" fill="rgb(221,220,41)" fg:x="4770" fg:w="4"/><text x="79.1843%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.03%)</title><rect x="79.0005%" y="101" width="0.0331%" height="15" fill="rgb(218,133,21)" fg:x="4774" fg:w="2"/><text x="79.2505%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.05%)</title><rect x="79.1163%" y="85" width="0.0496%" height="15" fill="rgb(221,193,43)" fg:x="4781" fg:w="3"/><text x="79.3663%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 0.48%)</title><rect x="79.1660%" y="85" width="0.4799%" height="15" fill="rgb(240,128,52)" fg:x="4784" fg:w="29"/><text x="79.4160%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.31%)</title><rect x="79.3315%" y="69" width="0.3144%" height="15" fill="rgb(253,114,12)" fg:x="4794" fg:w="19"/><text x="79.5815%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="79.6293%" y="53" width="0.0165%" height="15" fill="rgb(215,223,47)" fg:x="4812" fg:w="1"/><text x="79.8793%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="79.6459%" y="85" width="0.0165%" height="15" fill="rgb(248,225,23)" fg:x="4813" fg:w="1"/><text x="79.8959%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.05%)</title><rect x="79.6624%" y="85" width="0.0496%" height="15" fill="rgb(250,108,0)" fg:x="4814" fg:w="3"/><text x="79.9124%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.10%)</title><rect x="79.8610%" y="69" width="0.0993%" height="15" fill="rgb(228,208,7)" fg:x="4826" fg:w="6"/><text x="80.1110%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.03%)</title><rect x="79.9603%" y="69" width="0.0331%" height="15" fill="rgb(244,45,10)" fg:x="4832" fg:w="2"/><text x="80.2103%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.05%)</title><rect x="79.9934%" y="69" width="0.0496%" height="15" fill="rgb(207,125,25)" fg:x="4834" fg:w="3"/><text x="80.2434%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (25 samples, 0.41%)</title><rect x="79.7121%" y="85" width="0.4137%" height="15" fill="rgb(210,195,18)" fg:x="4817" fg:w="25"/><text x="79.9621%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.08%)</title><rect x="80.0430%" y="69" width="0.0827%" height="15" fill="rgb(249,80,12)" fg:x="4837" fg:w="5"/><text x="80.2930%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.03%)</title><rect x="80.1423%" y="69" width="0.0331%" height="15" fill="rgb(221,65,9)" fg:x="4843" fg:w="2"/><text x="80.3923%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="80.1754%" y="69" width="0.0165%" height="15" fill="rgb(235,49,36)" fg:x="4845" fg:w="1"/><text x="80.4254%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="80.1920%" y="53" width="0.0331%" height="15" fill="rgb(225,32,20)" fg:x="4846" fg:w="2"/><text x="80.4420%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.03%)</title><rect x="80.3905%" y="37" width="0.0331%" height="15" fill="rgb(215,141,46)" fg:x="4858" fg:w="2"/><text x="80.6405%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="80.4236%" y="37" width="0.0331%" height="15" fill="rgb(250,160,47)" fg:x="4860" fg:w="2"/><text x="80.6736%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.35%)</title><rect x="80.1258%" y="85" width="0.3475%" height="15" fill="rgb(216,222,40)" fg:x="4842" fg:w="21"/><text x="80.3758%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.28%)</title><rect x="80.1920%" y="69" width="0.2813%" height="15" fill="rgb(234,217,39)" fg:x="4846" fg:w="17"/><text x="80.4420%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.25%)</title><rect x="80.2251%" y="53" width="0.2482%" height="15" fill="rgb(207,178,40)" fg:x="4848" fg:w="15"/><text x="80.4751%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="80.4567%" y="37" width="0.0165%" height="15" fill="rgb(221,136,13)" fg:x="4862" fg:w="1"/><text x="80.7067%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.13%)</title><rect x="80.4733%" y="85" width="0.1324%" height="15" fill="rgb(249,199,10)" fg:x="4863" fg:w="8"/><text x="80.7233%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.07%)</title><rect x="80.5395%" y="69" width="0.0662%" height="15" fill="rgb(249,222,13)" fg:x="4867" fg:w="4"/><text x="80.7895%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="80.6057%" y="85" width="0.0165%" height="15" fill="rgb(244,185,38)" fg:x="4871" fg:w="1"/><text x="80.8557%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (100 samples, 1.65%)</title><rect x="79.0336%" y="101" width="1.6548%" height="15" fill="rgb(236,202,9)" fg:x="4776" fg:w="100"/><text x="79.2836%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.07%)</title><rect x="80.6222%" y="85" width="0.0662%" height="15" fill="rgb(250,229,37)" fg:x="4872" fg:w="4"/><text x="80.8722%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (149 samples, 2.47%)</title><rect x="78.3717%" y="117" width="2.4657%" height="15" fill="rgb(206,174,23)" fg:x="4736" fg:w="149"/><text x="78.6217%" y="127.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.15%)</title><rect x="80.6884%" y="101" width="0.1489%" height="15" fill="rgb(211,33,43)" fg:x="4876" fg:w="9"/><text x="80.9384%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (4 samples, 0.07%)</title><rect x="80.8373%" y="117" width="0.0662%" height="15" fill="rgb(245,58,50)" fg:x="4885" fg:w="4"/><text x="81.0873%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.07%)</title><rect x="80.9035%" y="117" width="0.0662%" height="15" fill="rgb(244,68,36)" fg:x="4889" fg:w="4"/><text x="81.1535%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.07%)</title><rect x="80.9697%" y="117" width="0.0662%" height="15" fill="rgb(232,229,15)" fg:x="4893" fg:w="4"/><text x="81.2197%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.05%)</title><rect x="81.0359%" y="117" width="0.0496%" height="15" fill="rgb(254,30,23)" fg:x="4897" fg:w="3"/><text x="81.2859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (193 samples, 3.19%)</title><rect x="78.2062%" y="133" width="3.1938%" height="15" fill="rgb(235,160,14)" fg:x="4726" fg:w="193"/><text x="78.4562%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.31%)</title><rect x="81.0856%" y="117" width="0.3144%" height="15" fill="rgb(212,155,44)" fg:x="4900" fg:w="19"/><text x="81.3356%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.28%)</title><rect x="81.1186%" y="101" width="0.2813%" height="15" fill="rgb(226,2,50)" fg:x="4902" fg:w="17"/><text x="81.3686%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (11 samples, 0.18%)</title><rect x="81.4000%" y="133" width="0.1820%" height="15" fill="rgb(234,177,6)" fg:x="4919" fg:w="11"/><text x="81.6500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.08%)</title><rect x="81.4993%" y="117" width="0.0827%" height="15" fill="rgb(217,24,9)" fg:x="4925" fg:w="5"/><text x="81.7493%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.03%)</title><rect x="81.5489%" y="101" width="0.0331%" height="15" fill="rgb(220,13,46)" fg:x="4928" fg:w="2"/><text x="81.7989%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.15%)</title><rect x="81.5820%" y="133" width="0.1489%" height="15" fill="rgb(239,221,27)" fg:x="4930" fg:w="9"/><text x="81.8320%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (221 samples, 3.66%)</title><rect x="78.1400%" y="149" width="3.6571%" height="15" fill="rgb(222,198,25)" fg:x="4722" fg:w="221"/><text x="78.3900%" y="159.50">colo..</text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.07%)</title><rect x="81.7309%" y="133" width="0.0662%" height="15" fill="rgb(211,99,13)" fg:x="4939" fg:w="4"/><text x="81.9809%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="81.7971%" y="149" width="0.0165%" height="15" fill="rgb(232,111,31)" fg:x="4943" fg:w="1"/><text x="82.0471%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (243 samples, 4.02%)</title><rect x="77.9083%" y="165" width="4.0212%" height="15" fill="rgb(245,82,37)" fg:x="4708" fg:w="243"/><text x="78.1583%" y="175.50">colo..</text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.12%)</title><rect x="81.8137%" y="149" width="0.1158%" height="15" fill="rgb(227,149,46)" fg:x="4944" fg:w="7"/><text x="82.0637%" y="159.50"></text></g><g><title>colors`fontdue::math::Geometry::push (437 samples, 7.23%)</title><rect x="74.7145%" y="181" width="7.2315%" height="15" fill="rgb(218,36,50)" fg:x="4515" fg:w="437"/><text x="74.9645%" y="191.50">colors`fon..</text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="81.9295%" y="165" width="0.0165%" height="15" fill="rgb(226,80,48)" fg:x="4951" fg:w="1"/><text x="82.1795%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (10 samples, 0.17%)</title><rect x="81.9461%" y="181" width="0.1655%" height="15" fill="rgb(238,224,15)" fg:x="4952" fg:w="10"/><text x="82.1961%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (142 samples, 2.35%)</title><rect x="82.1115%" y="181" width="2.3498%" height="15" fill="rgb(241,136,10)" fg:x="4962" fg:w="142"/><text x="82.3615%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (84 samples, 1.39%)</title><rect x="84.4614%" y="181" width="1.3900%" height="15" fill="rgb(208,32,45)" fg:x="5104" fg:w="84"/><text x="84.7114%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.10%)</title><rect x="85.8514%" y="181" width="0.0993%" height="15" fill="rgb(207,135,9)" fg:x="5188" fg:w="6"/><text x="86.1014%" y="191.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (1,780 samples, 29.46%)</title><rect x="56.6606%" y="197" width="29.4556%" height="15" fill="rgb(206,86,44)" fg:x="3424" fg:w="1780"/><text x="56.9106%" y="207.50">colors`&lt;fontdue::math::Geometry as ttf_parser::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.17%)</title><rect x="85.9507%" y="181" width="0.1655%" height="15" fill="rgb(245,177,15)" fg:x="5194" fg:w="10"/><text x="86.2007%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$free (5 samples, 0.08%)</title><rect x="86.1162%" y="197" width="0.0827%" height="15" fill="rgb(206,64,50)" fg:x="5204" fg:w="5"/><text x="86.3662%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="86.1989%" y="197" width="0.0331%" height="15" fill="rgb(234,36,40)" fg:x="5209" fg:w="2"/><text x="86.4489%" y="207.50"></text></g><g><title>colors`__rdl_alloc (26 samples, 0.43%)</title><rect x="86.2320%" y="197" width="0.4302%" height="15" fill="rgb(213,64,8)" fg:x="5211" fg:w="26"/><text x="86.4820%" y="207.50"></text></g><g><title>colors`__rust_alloc (4 samples, 0.07%)</title><rect x="86.6623%" y="197" width="0.0662%" height="15" fill="rgb(210,75,36)" fg:x="5237" fg:w="4"/><text x="86.9123%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 0.22%)</title><rect x="86.7284%" y="197" width="0.2151%" height="15" fill="rgb(229,88,21)" fg:x="5241" fg:w="13"/><text x="86.9784%" y="207.50"></text></g><g><title>colors`fontdue::math::Geometry::push (355 samples, 5.87%)</title><rect x="86.9436%" y="197" width="5.8746%" height="15" fill="rgb(252,204,47)" fg:x="5254" fg:w="355"/><text x="87.1936%" y="207.50">colors`..</text></g><g><title>libsystem_malloc.dylib`_free (50 samples, 0.83%)</title><rect x="92.8181%" y="197" width="0.8274%" height="15" fill="rgb(208,77,27)" fg:x="5609" fg:w="50"/><text x="93.0681%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 0.96%)</title><rect x="93.6455%" y="197" width="0.9598%" height="15" fill="rgb(221,76,26)" fg:x="5659" fg:w="58"/><text x="93.8955%" y="207.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (3,030 samples, 50.14%)</title><rect x="44.7791%" y="213" width="50.1407%" height="15" fill="rgb(225,139,18)" fg:x="2706" fg:w="3030"/><text x="45.0291%" y="223.50">colors`ttf_parser::tables::glyf::outline_impl</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (19 samples, 0.31%)</title><rect x="94.6053%" y="197" width="0.3144%" height="15" fill="rgb(230,137,11)" fg:x="5717" fg:w="19"/><text x="94.8553%" y="207.50"></text></g><g><title>colors`ttf_parser::tables::glyf::resolve_coords_len (97 samples, 1.61%)</title><rect x="94.9197%" y="213" width="1.6052%" height="15" fill="rgb(212,28,1)" fg:x="5736" fg:w="97"/><text x="95.1697%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (36 samples, 0.60%)</title><rect x="96.5249%" y="213" width="0.5957%" height="15" fill="rgb(248,164,17)" fg:x="5833" fg:w="36"/><text x="96.7749%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.68%)</title><rect x="97.1206%" y="213" width="0.6785%" height="15" fill="rgb(222,171,42)" fg:x="5869" fg:w="41"/><text x="97.3706%" y="223.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (5,137 samples, 85.01%)</title><rect x="12.9406%" y="229" width="85.0074%" height="15" fill="rgb(243,84,45)" fg:x="782" fg:w="5137"/><text x="13.1906%" y="239.50">colors`ttf_parser::tables::glyf::outline_impl</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.15%)</title><rect x="97.7991%" y="213" width="0.1489%" height="15" fill="rgb(252,49,23)" fg:x="5910" fg:w="9"/><text x="98.0491%" y="223.50"></text></g><g><title>colors`ttf_parser::tables::glyf::resolve_coords_len (49 samples, 0.81%)</title><rect x="97.9480%" y="229" width="0.8109%" height="15" fill="rgb(215,19,7)" fg:x="5919" fg:w="49"/><text x="98.1980%" y="239.50"></text></g><g><title>colors`fontdue::font::Font::from_bytes (5,828 samples, 96.44%)</title><rect x="2.3333%" y="245" width="96.4422%" height="15" fill="rgb(238,81,41)" fg:x="141" fg:w="5828"/><text x="2.5833%" y="255.50">colors`fontdue::font::Font::from_bytes</text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="98.7589%" y="229" width="0.0165%" height="15" fill="rgb(210,199,37)" fg:x="5968" fg:w="1"/><text x="99.0089%" y="239.50"></text></g><g><title>colors`fontdue::hash::hash (54 samples, 0.89%)</title><rect x="98.7754%" y="245" width="0.8936%" height="15" fill="rgb(244,192,49)" fg:x="5969" fg:w="54"/><text x="99.0254%" y="255.50"></text></g><g><title>colors`fontdue::math::Geometry::finalize (1 samples, 0.02%)</title><rect x="99.6690%" y="245" width="0.0165%" height="15" fill="rgb(226,211,11)" fg:x="6023" fg:w="1"/><text x="99.9190%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (1 samples, 0.02%)</title><rect x="99.6856%" y="181" width="0.0165%" height="15" fill="rgb(236,162,54)" fg:x="6024" fg:w="1"/><text x="99.9356%" y="191.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2 samples, 0.03%)</title><rect x="99.6856%" y="197" width="0.0331%" height="15" fill="rgb(220,229,9)" fg:x="6024" fg:w="2"/><text x="99.9356%" y="207.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (1 samples, 0.02%)</title><rect x="99.7021%" y="181" width="0.0165%" height="15" fill="rgb(250,87,22)" fg:x="6025" fg:w="1"/><text x="99.9521%" y="191.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (1 samples, 0.02%)</title><rect x="99.7187%" y="197" width="0.0165%" height="15" fill="rgb(239,43,17)" fg:x="6026" fg:w="1"/><text x="99.9687%" y="207.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (1 samples, 0.02%)</title><rect x="99.7187%" y="181" width="0.0165%" height="15" fill="rgb(231,177,25)" fg:x="6026" fg:w="1"/><text x="99.9687%" y="191.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (1 samples, 0.02%)</title><rect x="99.7187%" y="165" width="0.0165%" height="15" fill="rgb(219,179,1)" fg:x="6026" fg:w="1"/><text x="99.9687%" y="175.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba (1 samples, 0.02%)</title><rect x="99.7187%" y="149" width="0.0165%" height="15" fill="rgb(238,219,53)" fg:x="6026" fg:w="1"/><text x="99.9687%" y="159.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (4 samples, 0.07%)</title><rect x="99.6856%" y="245" width="0.0662%" height="15" fill="rgb(232,167,36)" fg:x="6024" fg:w="4"/><text x="99.9356%" y="255.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (4 samples, 0.07%)</title><rect x="99.6856%" y="229" width="0.0662%" height="15" fill="rgb(244,19,51)" fg:x="6024" fg:w="4"/><text x="99.9356%" y="239.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (4 samples, 0.07%)</title><rect x="99.6856%" y="213" width="0.0662%" height="15" fill="rgb(224,6,22)" fg:x="6024" fg:w="4"/><text x="99.9356%" y="223.50"></text></g><g><title>colors`tiny_skia_path::rect::Rect::round (1 samples, 0.02%)</title><rect x="99.7352%" y="197" width="0.0165%" height="15" fill="rgb(224,145,5)" fg:x="6027" fg:w="1"/><text x="99.9852%" y="207.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (2 samples, 0.03%)</title><rect x="99.7518%" y="245" width="0.0331%" height="15" fill="rgb(234,130,49)" fg:x="6028" fg:w="2"/><text x="100.0018%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.12%)</title><rect x="99.7849%" y="245" width="0.1158%" height="15" fill="rgb(254,6,2)" fg:x="6030" fg:w="7"/><text x="100.0349%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="99.9007%" y="245" width="0.0496%" height="15" fill="rgb(208,96,46)" fg:x="6037" fg:w="3"/><text x="100.1507%" y="255.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (6,042 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9835%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="6042"/><text x="0.2500%" y="303.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (6,041 samples, 99.97%)</title><rect x="0.0165%" y="277" width="99.9669%" height="15" fill="rgb(233,210,1)" fg:x="1" fg:w="6041"/><text x="0.2665%" y="287.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (6,041 samples, 99.97%)</title><rect x="0.0165%" y="261" width="99.9669%" height="15" fill="rgb(244,137,37)" fg:x="1" fg:w="6041"/><text x="0.2665%" y="271.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.03%)</title><rect x="99.9504%" y="245" width="0.0331%" height="15" fill="rgb(240,136,2)" fg:x="6040" fg:w="2"/><text x="100.2004%" y="255.50"></text></g><g><title>all (6,043 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld`start (6,043 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>colors`main (6,043 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="383.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (6,043 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="367.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (6,043 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="351.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (6,043 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="335.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (6,043 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="6043"/><text x="0.2500%" y="319.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (1 samples, 0.02%)</title><rect x="99.9835%" y="293" width="0.0165%" height="15" fill="rgb(227,7,12)" fg:x="6042" fg:w="1"/><text x="100.2335%" y="303.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::empty (1 samples, 0.02%)</title><rect x="99.9835%" y="277" width="0.0165%" height="15" fill="rgb(245,203,43)" fg:x="6042" fg:w="1"/><text x="100.2335%" y="287.50"></text></g><g><title>colors`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="99.9835%" y="261" width="0.0165%" height="15" fill="rgb(238,205,33)" fg:x="6042" fg:w="1"/><text x="100.2335%" y="271.50"></text></g><g><title>colors`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="99.9835%" y="245" width="0.0165%" height="15" fill="rgb(231,56,7)" fg:x="6042" fg:w="1"/><text x="100.2335%" y="255.50"></text></g></svg></svg>