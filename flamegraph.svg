<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="1727"><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (1 samples, 0.06%)</title><rect x="0.0000%" y="357" width="0.0579%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (1 samples, 0.06%)</title><rect x="0.0000%" y="341" width="0.0579%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.06%)</title><rect x="0.0579%" y="341" width="0.0579%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3079%" y="351.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of_opt (1 samples, 0.06%)</title><rect x="0.1158%" y="341" width="0.0579%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3658%" y="351.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::symbol (1 samples, 0.06%)</title><rect x="0.1737%" y="341" width="0.0579%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.4237%" y="351.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (7 samples, 0.41%)</title><rect x="0.5790%" y="293" width="0.4053%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="7"/><text x="0.8290%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (2 samples, 0.12%)</title><rect x="1.1581%" y="277" width="0.1158%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="2"/><text x="1.4081%" y="287.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (5 samples, 0.29%)</title><rect x="2.6636%" y="261" width="0.2895%" height="15" fill="rgb(228,23,34)" fg:x="46" fg:w="5"/><text x="2.9136%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (12 samples, 0.69%)</title><rect x="2.9531%" y="261" width="0.6948%" height="15" fill="rgb(218,30,26)" fg:x="51" fg:w="12"/><text x="3.2031%" y="271.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (1 samples, 0.06%)</title><rect x="3.6479%" y="261" width="0.0579%" height="15" fill="rgb(220,122,19)" fg:x="63" fg:w="1"/><text x="3.8979%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (8 samples, 0.46%)</title><rect x="3.7058%" y="261" width="0.4632%" height="15" fill="rgb(250,228,42)" fg:x="64" fg:w="8"/><text x="3.9558%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (3 samples, 0.17%)</title><rect x="4.1691%" y="261" width="0.1737%" height="15" fill="rgb(240,193,28)" fg:x="72" fg:w="3"/><text x="4.4191%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (52 samples, 3.01%)</title><rect x="11.9861%" y="245" width="3.0110%" height="15" fill="rgb(216,20,37)" fg:x="207" fg:w="52"/><text x="12.2361%" y="255.50">col..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (317 samples, 18.36%)</title><rect x="14.9971%" y="245" width="18.3555%" height="15" fill="rgb(206,188,39)" fg:x="259" fg:w="317"/><text x="15.2471%" y="255.50">colors`tiny_skia::pipeline::R..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (67 samples, 3.88%)</title><rect x="33.3526%" y="245" width="3.8796%" height="15" fill="rgb(217,207,13)" fg:x="576" fg:w="67"/><text x="33.6026%" y="255.50">colo..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (797 samples, 46.15%)</title><rect x="4.3428%" y="261" width="46.1494%" height="15" fill="rgb(231,73,38)" fg:x="75" fg:w="797"/><text x="4.5928%" y="271.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new</text></g><g><title>libsystem_platform.dylib`_platform_memmove (229 samples, 13.26%)</title><rect x="37.2322%" y="245" width="13.2600%" height="15" fill="rgb(225,20,46)" fg:x="643" fg:w="229"/><text x="37.4822%" y="255.50">libsystem_platform.d..</text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (3 samples, 0.17%)</title><rect x="53.5611%" y="229" width="0.1737%" height="15" fill="rgb(210,31,41)" fg:x="925" fg:w="3"/><text x="53.8111%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (3 samples, 0.17%)</title><rect x="54.2559%" y="213" width="0.1737%" height="15" fill="rgb(221,200,47)" fg:x="937" fg:w="3"/><text x="54.5059%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (49 samples, 2.84%)</title><rect x="54.4296%" y="213" width="2.8373%" height="15" fill="rgb(226,26,5)" fg:x="940" fg:w="49"/><text x="54.6796%" y="223.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.41%)</title><rect x="57.2669%" y="213" width="0.4053%" height="15" fill="rgb(249,33,26)" fg:x="989" fg:w="7"/><text x="57.5169%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (71 samples, 4.11%)</title><rect x="53.7348%" y="229" width="4.1112%" height="15" fill="rgb(235,183,28)" fg:x="928" fg:w="71"/><text x="53.9848%" y="239.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.17%)</title><rect x="57.6723%" y="213" width="0.1737%" height="15" fill="rgb(221,5,38)" fg:x="996" fg:w="3"/><text x="57.9223%" y="223.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (104 samples, 6.02%)</title><rect x="52.6346%" y="245" width="6.0220%" height="15" fill="rgb(247,18,42)" fg:x="909" fg:w="104"/><text x="52.8846%" y="255.50">colors`&lt;..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (14 samples, 0.81%)</title><rect x="57.8460%" y="229" width="0.8107%" height="15" fill="rgb(241,131,45)" fg:x="999" fg:w="14"/><text x="58.0960%" y="239.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (142 samples, 8.22%)</title><rect x="50.4922%" y="261" width="8.2224%" height="15" fill="rgb(249,31,29)" fg:x="872" fg:w="142"/><text x="50.7422%" y="271.50">colors`tiny..</text></g><g><title>colors`tiny_skia::pipeline::lowp::start (1 samples, 0.06%)</title><rect x="58.6566%" y="245" width="0.0579%" height="15" fill="rgb(225,111,53)" fg:x="1013" fg:w="1"/><text x="58.9066%" y="255.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (6 samples, 0.35%)</title><rect x="58.7145%" y="261" width="0.3474%" height="15" fill="rgb(238,160,17)" fg:x="1014" fg:w="6"/><text x="58.9645%" y="271.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (8 samples, 0.46%)</title><rect x="59.0620%" y="261" width="0.4632%" height="15" fill="rgb(214,148,48)" fg:x="1020" fg:w="8"/><text x="59.3120%" y="271.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (48 samples, 2.78%)</title><rect x="59.5252%" y="261" width="2.7794%" height="15" fill="rgb(232,36,49)" fg:x="1028" fg:w="48"/><text x="59.7752%" y="271.50">co..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (18 samples, 1.04%)</title><rect x="62.3046%" y="261" width="1.0423%" height="15" fill="rgb(209,103,24)" fg:x="1076" fg:w="18"/><text x="62.5546%" y="271.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (1,400 samples, 81.07%)</title><rect x="1.2739%" y="277" width="81.0654%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="1400"/><text x="1.5239%" y="287.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (328 samples, 18.99%)</title><rect x="63.3468%" y="261" width="18.9925%" height="15" fill="rgb(213,181,19)" fg:x="1094" fg:w="328"/><text x="63.5968%" y="271.50">libsystem_platform.dylib`_plat..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (8 samples, 0.46%)</title><rect x="82.3393%" y="277" width="0.4632%" height="15" fill="rgb(254,191,54)" fg:x="1422" fg:w="8"/><text x="82.5893%" y="287.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (3 samples, 0.17%)</title><rect x="82.8025%" y="277" width="0.1737%" height="15" fill="rgb(241,83,37)" fg:x="1430" fg:w="3"/><text x="83.0525%" y="287.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (7 samples, 0.41%)</title><rect x="82.9763%" y="277" width="0.4053%" height="15" fill="rgb(233,36,39)" fg:x="1433" fg:w="7"/><text x="83.2263%" y="287.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (1,584 samples, 91.72%)</title><rect x="0.9844%" y="293" width="91.7197%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="1584"/><text x="1.2344%" y="303.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (161 samples, 9.32%)</title><rect x="83.3816%" y="277" width="9.3225%" height="15" fill="rgb(245,192,40)" fg:x="1440" fg:w="161"/><text x="83.6316%" y="287.50">libsystem_pla..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (1,600 samples, 92.65%)</title><rect x="0.2316%" y="309" width="92.6462%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1600"/><text x="0.4816%" y="319.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (3 samples, 0.17%)</title><rect x="92.7041%" y="293" width="0.1737%" height="15" fill="rgb(232,182,51)" fg:x="1601" fg:w="3"/><text x="92.9541%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (3 samples, 0.17%)</title><rect x="92.8778%" y="309" width="0.1737%" height="15" fill="rgb(231,60,39)" fg:x="1604" fg:w="3"/><text x="93.1278%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (1,615 samples, 93.51%)</title><rect x="0.2316%" y="325" width="93.5148%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1615"/><text x="0.4816%" y="335.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (12 samples, 0.69%)</title><rect x="93.0515%" y="309" width="0.6948%" height="15" fill="rgb(235,93,37)" fg:x="1607" fg:w="12"/><text x="93.3015%" y="319.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsOwned::new (1 samples, 0.06%)</title><rect x="93.7464%" y="293" width="0.0579%" height="15" fill="rgb(213,116,39)" fg:x="1619" fg:w="1"/><text x="93.9964%" y="303.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="93.8043%" y="277" width="0.0579%" height="15" fill="rgb(222,207,29)" fg:x="1620" fg:w="1"/><text x="94.0543%" y="287.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="93.8043%" y="261" width="0.0579%" height="15" fill="rgb(206,96,30)" fg:x="1620" fg:w="1"/><text x="94.0543%" y="271.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (1 samples, 0.06%)</title><rect x="93.8043%" y="245" width="0.0579%" height="15" fill="rgb(218,138,4)" fg:x="1620" fg:w="1"/><text x="94.0543%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.06%)</title><rect x="93.8622%" y="277" width="0.0579%" height="15" fill="rgb(250,191,14)" fg:x="1621" fg:w="1"/><text x="94.1122%" y="287.50"></text></g><g><title>colors`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (3 samples, 0.17%)</title><rect x="93.9201%" y="277" width="0.1737%" height="15" fill="rgb(239,60,40)" fg:x="1622" fg:w="3"/><text x="94.1701%" y="287.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::add_span (7 samples, 0.41%)</title><rect x="93.7464%" y="309" width="0.4053%" height="15" fill="rgb(206,27,48)" fg:x="1619" fg:w="7"/><text x="93.9964%" y="319.50"></text></g><g><title>colors`rangemap::map::RangeMap&lt;K,V&gt;::insert (6 samples, 0.35%)</title><rect x="93.8043%" y="293" width="0.3474%" height="15" fill="rgb(225,35,8)" fg:x="1620" fg:w="6"/><text x="94.0543%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="94.0938%" y="277" width="0.0579%" height="15" fill="rgb(250,213,24)" fg:x="1625" fg:w="1"/><text x="94.3438%" y="287.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::reset (1 samples, 0.06%)</title><rect x="94.1517%" y="309" width="0.0579%" height="15" fill="rgb(247,123,22)" fg:x="1626" fg:w="1"/><text x="94.4017%" y="319.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::clear (1 samples, 0.06%)</title><rect x="94.1517%" y="293" width="0.0579%" height="15" fill="rgb(231,138,38)" fg:x="1626" fg:w="1"/><text x="94.4017%" y="303.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="94.1517%" y="277" width="0.0579%" height="15" fill="rgb(231,145,46)" fg:x="1626" fg:w="1"/><text x="94.4017%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="94.1517%" y="261" width="0.0579%" height="15" fill="rgb(251,118,11)" fg:x="1626" fg:w="1"/><text x="94.4017%" y="271.50"></text></g><g><title>colors`cosmic_text::bidi_para::BidiParagraphs::new (1 samples, 0.06%)</title><rect x="94.2096%" y="309" width="0.0579%" height="15" fill="rgb(217,147,25)" fg:x="1627" fg:w="1"/><text x="94.4596%" y="319.50"></text></g><g><title>colors`unicode_bidi::char_data::bsearch_range_value_table (1 samples, 0.06%)</title><rect x="94.2096%" y="293" width="0.0579%" height="15" fill="rgb(247,81,37)" fg:x="1627" fg:w="1"/><text x="94.4596%" y="303.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.06%)</title><rect x="94.2675%" y="213" width="0.0579%" height="15" fill="rgb(209,12,38)" fg:x="1628" fg:w="1"/><text x="94.5175%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.06%)</title><rect x="94.3254%" y="213" width="0.0579%" height="15" fill="rgb(227,1,9)" fg:x="1629" fg:w="1"/><text x="94.5754%" y="223.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.12%)</title><rect x="94.3833%" y="213" width="0.1158%" height="15" fill="rgb(248,47,43)" fg:x="1630" fg:w="2"/><text x="94.6333%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (1 samples, 0.06%)</title><rect x="94.4412%" y="197" width="0.0579%" height="15" fill="rgb(221,10,30)" fg:x="1631" fg:w="1"/><text x="94.6912%" y="207.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.87%)</title><rect x="94.5570%" y="197" width="0.8686%" height="15" fill="rgb(210,229,1)" fg:x="1633" fg:w="15"/><text x="94.8070%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (6 samples, 0.35%)</title><rect x="95.0782%" y="181" width="0.3474%" height="15" fill="rgb(222,148,37)" fg:x="1642" fg:w="6"/><text x="95.3282%" y="191.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (1 samples, 0.06%)</title><rect x="95.4256%" y="181" width="0.0579%" height="15" fill="rgb(234,67,33)" fg:x="1648" fg:w="1"/><text x="95.6756%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="95.4256%" y="165" width="0.0579%" height="15" fill="rgb(247,98,35)" fg:x="1648" fg:w="1"/><text x="95.6756%" y="175.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (1 samples, 0.06%)</title><rect x="95.4835%" y="181" width="0.0579%" height="15" fill="rgb(247,138,52)" fg:x="1649" fg:w="1"/><text x="95.7335%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (1 samples, 0.06%)</title><rect x="95.5414%" y="181" width="0.0579%" height="15" fill="rgb(213,79,30)" fg:x="1650" fg:w="1"/><text x="95.7914%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (1 samples, 0.06%)</title><rect x="95.5414%" y="165" width="0.0579%" height="15" fill="rgb(246,177,23)" fg:x="1650" fg:w="1"/><text x="95.7914%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::glyph_advance (1 samples, 0.06%)</title><rect x="95.6572%" y="165" width="0.0579%" height="15" fill="rgb(230,62,27)" fg:x="1652" fg:w="1"/><text x="95.9072%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (6 samples, 0.35%)</title><rect x="95.7151%" y="165" width="0.3474%" height="15" fill="rgb(216,154,8)" fg:x="1653" fg:w="6"/><text x="95.9651%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::chained_context::ChainedContextLookup as rustybuzz::hb::ot_layout_gsubgpos::Apply&gt;::apply (1 samples, 0.06%)</title><rect x="96.0046%" y="149" width="0.0579%" height="15" fill="rgb(244,35,45)" fg:x="1658" fg:w="1"/><text x="96.2546%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout_gsubgpos::skipping_iterator_t::next (1 samples, 0.06%)</title><rect x="96.0046%" y="133" width="0.0579%" height="15" fill="rgb(251,115,12)" fg:x="1658" fg:w="1"/><text x="96.2546%" y="143.50"></text></g><g><title>colors`ttf_parser::ggg::Coverage::contains (1 samples, 0.06%)</title><rect x="96.0046%" y="117" width="0.0579%" height="15" fill="rgb(240,54,50)" fg:x="1658" fg:w="1"/><text x="96.2546%" y="127.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (1 samples, 0.06%)</title><rect x="96.0625%" y="165" width="0.0579%" height="15" fill="rgb(233,84,52)" fg:x="1659" fg:w="1"/><text x="96.3125%" y="175.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (1 samples, 0.06%)</title><rect x="96.0625%" y="149" width="0.0579%" height="15" fill="rgb(207,117,47)" fg:x="1659" fg:w="1"/><text x="96.3125%" y="159.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (34 samples, 1.97%)</title><rect x="94.2675%" y="245" width="1.9687%" height="15" fill="rgb(249,43,39)" fg:x="1628" fg:w="34"/><text x="94.5175%" y="255.50">c..</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (34 samples, 1.97%)</title><rect x="94.2675%" y="229" width="1.9687%" height="15" fill="rgb(209,38,44)" fg:x="1628" fg:w="34"/><text x="94.5175%" y="239.50">c..</text></g><g><title>colors`cosmic_text::shape::Shaping::run (30 samples, 1.74%)</title><rect x="94.4991%" y="213" width="1.7371%" height="15" fill="rgb(236,212,23)" fg:x="1632" fg:w="30"/><text x="94.7491%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (14 samples, 0.81%)</title><rect x="95.4256%" y="197" width="0.8107%" height="15" fill="rgb(242,79,21)" fg:x="1648" fg:w="14"/><text x="95.6756%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (11 samples, 0.64%)</title><rect x="95.5993%" y="181" width="0.6369%" height="15" fill="rgb(211,96,35)" fg:x="1651" fg:w="11"/><text x="95.8493%" y="191.50"></text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (2 samples, 0.12%)</title><rect x="96.1204%" y="165" width="0.1158%" height="15" fill="rgb(253,215,40)" fg:x="1660" fg:w="2"/><text x="96.3704%" y="175.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (35 samples, 2.03%)</title><rect x="94.2675%" y="277" width="2.0266%" height="15" fill="rgb(211,81,21)" fg:x="1628" fg:w="35"/><text x="94.5175%" y="287.50">c..</text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (35 samples, 2.03%)</title><rect x="94.2675%" y="261" width="2.0266%" height="15" fill="rgb(208,190,38)" fg:x="1628" fg:w="35"/><text x="94.5175%" y="271.50">c..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="96.2362%" y="245" width="0.0579%" height="15" fill="rgb(235,213,38)" fg:x="1662" fg:w="1"/><text x="96.4862%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="96.2362%" y="229" width="0.0579%" height="15" fill="rgb(237,122,38)" fg:x="1662" fg:w="1"/><text x="96.4862%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="96.2362%" y="213" width="0.0579%" height="15" fill="rgb(244,218,35)" fg:x="1662" fg:w="1"/><text x="96.4862%" y="223.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_rich_text (45 samples, 2.61%)</title><rect x="93.7464%" y="325" width="2.6057%" height="15" fill="rgb(240,68,47)" fg:x="1619" fg:w="45"/><text x="93.9964%" y="335.50">co..</text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (36 samples, 2.08%)</title><rect x="94.2675%" y="309" width="2.0845%" height="15" fill="rgb(210,16,53)" fg:x="1628" fg:w="36"/><text x="94.5175%" y="319.50">c..</text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (36 samples, 2.08%)</title><rect x="94.2675%" y="293" width="2.0845%" height="15" fill="rgb(235,124,12)" fg:x="1628" fg:w="36"/><text x="94.5175%" y="303.50">c..</text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (1 samples, 0.06%)</title><rect x="96.2942%" y="277" width="0.0579%" height="15" fill="rgb(224,169,11)" fg:x="1663" fg:w="1"/><text x="96.5442%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (1 samples, 0.06%)</title><rect x="96.2942%" y="261" width="0.0579%" height="15" fill="rgb(250,166,2)" fg:x="1663" fg:w="1"/><text x="96.5442%" y="271.50"></text></g><g><title>colors`std::io::stdio::_print (1 samples, 0.06%)</title><rect x="96.3521%" y="325" width="0.0579%" height="15" fill="rgb(242,216,29)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="335.50"></text></g><g><title>colors`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.06%)</title><rect x="96.3521%" y="309" width="0.0579%" height="15" fill="rgb(230,116,27)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="319.50"></text></g><g><title>colors`core::fmt::write (1 samples, 0.06%)</title><rect x="96.3521%" y="293" width="0.0579%" height="15" fill="rgb(228,99,48)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="303.50"></text></g><g><title>colors`&lt;cosmic_text::attrs::Attrs as core::fmt::Debug&gt;::fmt (1 samples, 0.06%)</title><rect x="96.3521%" y="277" width="0.0579%" height="15" fill="rgb(253,11,6)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="287.50"></text></g><g><title>colors`core::fmt::Formatter::debug_struct_fields_finish (1 samples, 0.06%)</title><rect x="96.3521%" y="261" width="0.0579%" height="15" fill="rgb(247,143,39)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="271.50"></text></g><g><title>colors`core::fmt::builders::DebugStruct::field (1 samples, 0.06%)</title><rect x="96.3521%" y="245" width="0.0579%" height="15" fill="rgb(236,97,10)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="255.50"></text></g><g><title>colors`&lt;cosmic_text::glyph_cache::CacheKeyFlags as core::fmt::Debug&gt;::fmt (1 samples, 0.06%)</title><rect x="96.3521%" y="229" width="0.0579%" height="15" fill="rgb(233,208,19)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="239.50"></text></g><g><title>colors`core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.06%)</title><rect x="96.3521%" y="213" width="0.0579%" height="15" fill="rgb(216,164,2)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="223.50"></text></g><g><title>colors`core::fmt::builders::DebugTuple::field (1 samples, 0.06%)</title><rect x="96.3521%" y="197" width="0.0579%" height="15" fill="rgb(220,129,5)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="207.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="96.3521%" y="181" width="0.0579%" height="15" fill="rgb(242,17,10)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="191.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="96.3521%" y="165" width="0.0579%" height="15" fill="rgb(242,107,0)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="175.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="96.3521%" y="149" width="0.0579%" height="15" fill="rgb(251,28,31)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="159.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.06%)</title><rect x="96.3521%" y="133" width="0.0579%" height="15" fill="rgb(233,223,10)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.06%)</title><rect x="96.3521%" y="117" width="0.0579%" height="15" fill="rgb(215,21,27)" fg:x="1664" fg:w="1"/><text x="96.6021%" y="127.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_buffer (1,662 samples, 96.24%)</title><rect x="0.2316%" y="341" width="96.2362%" height="15" fill="rgb(232,23,21)" fg:x="4" fg:w="1662"/><text x="0.4816%" y="351.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_buffer</text></g><g><title>colors`tiny_skia::pixmap::Pixmap::fill (1 samples, 0.06%)</title><rect x="96.4100%" y="325" width="0.0579%" height="15" fill="rgb(244,5,23)" fg:x="1665" fg:w="1"/><text x="96.6600%" y="335.50"></text></g><g><title>colors`std::fs::write::inner (2 samples, 0.12%)</title><rect x="96.4679%" y="341" width="0.1158%" height="15" fill="rgb(226,81,46)" fg:x="1666" fg:w="2"/><text x="96.7179%" y="351.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.12%)</title><rect x="96.4679%" y="325" width="0.1158%" height="15" fill="rgb(247,70,30)" fg:x="1666" fg:w="2"/><text x="96.7179%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.12%)</title><rect x="96.4679%" y="309" width="0.1158%" height="15" fill="rgb(212,68,19)" fg:x="1666" fg:w="2"/><text x="96.7179%" y="319.50"></text></g><g><title>colors`crc32fast::Hasher::update (1 samples, 0.06%)</title><rect x="96.9890%" y="309" width="0.0579%" height="15" fill="rgb(240,187,13)" fg:x="1675" fg:w="1"/><text x="97.2390%" y="319.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (4 samples, 0.23%)</title><rect x="97.3364%" y="293" width="0.2316%" height="15" fill="rgb(223,113,26)" fg:x="1681" fg:w="4"/><text x="97.5864%" y="303.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (24 samples, 1.39%)</title><rect x="97.0469%" y="309" width="1.3897%" height="15" fill="rgb(206,192,2)" fg:x="1676" fg:w="24"/><text x="97.2969%" y="319.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (15 samples, 0.87%)</title><rect x="97.5680%" y="293" width="0.8686%" height="15" fill="rgb(241,108,4)" fg:x="1685" fg:w="15"/><text x="97.8180%" y="303.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (3 samples, 0.17%)</title><rect x="98.4366%" y="309" width="0.1737%" height="15" fill="rgb(247,173,49)" fg:x="1700" fg:w="3"/><text x="98.6866%" y="319.50"></text></g><g><title>colors`png::filter::filter (1 samples, 0.06%)</title><rect x="98.6103%" y="309" width="0.0579%" height="15" fill="rgb(224,114,35)" fg:x="1703" fg:w="1"/><text x="98.8603%" y="319.50"></text></g><g><title>colors`png::filter::filter_internal (1 samples, 0.06%)</title><rect x="98.6103%" y="293" width="0.0579%" height="15" fill="rgb(245,159,27)" fg:x="1703" fg:w="1"/><text x="98.8603%" y="303.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (38 samples, 2.20%)</title><rect x="96.5837%" y="341" width="2.2003%" height="15" fill="rgb(245,172,44)" fg:x="1668" fg:w="38"/><text x="96.8337%" y="351.50">c..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (31 samples, 1.80%)</title><rect x="96.9890%" y="325" width="1.7950%" height="15" fill="rgb(236,23,11)" fg:x="1675" fg:w="31"/><text x="97.2390%" y="335.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.12%)</title><rect x="98.6682%" y="309" width="0.1158%" height="15" fill="rgb(205,117,38)" fg:x="1704" fg:w="2"/><text x="98.9182%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.06%)</title><rect x="98.7840%" y="341" width="0.0579%" height="15" fill="rgb(237,72,25)" fg:x="1706" fg:w="1"/><text x="99.0340%" y="351.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (1,711 samples, 99.07%)</title><rect x="0.0579%" y="357" width="99.0735%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="1711"/><text x="0.3079%" y="367.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.29%)</title><rect x="98.8419%" y="341" width="0.2895%" height="15" fill="rgb(217,125,39)" fg:x="1707" fg:w="5"/><text x="99.0919%" y="351.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (1,713 samples, 99.19%)</title><rect x="0.0000%" y="373" width="99.1893%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="1713"/><text x="0.2500%" y="383.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (1 samples, 0.06%)</title><rect x="99.1314%" y="357" width="0.0579%" height="15" fill="rgb(251,123,47)" fg:x="1712" fg:w="1"/><text x="99.3814%" y="367.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.06%)</title><rect x="99.1314%" y="341" width="0.0579%" height="15" fill="rgb(221,13,13)" fg:x="1712" fg:w="1"/><text x="99.3814%" y="351.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="99.1893%" y="229" width="0.0579%" height="15" fill="rgb(238,131,9)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="239.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (1 samples, 0.06%)</title><rect x="99.1893%" y="213" width="0.0579%" height="15" fill="rgb(211,50,8)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="223.50"></text></g><g><title>colors`cosmic_text::font::Font::new (1 samples, 0.06%)</title><rect x="99.1893%" y="197" width="0.0579%" height="15" fill="rgb(245,182,24)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.06%)</title><rect x="99.1893%" y="181" width="0.0579%" height="15" fill="rgb(242,14,37)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (1 samples, 0.06%)</title><rect x="99.1893%" y="165" width="0.0579%" height="15" fill="rgb(246,228,12)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="175.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="99.1893%" y="149" width="0.0579%" height="15" fill="rgb(213,55,15)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="159.50"></text></g><g><title>colors`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.06%)</title><rect x="99.1893%" y="133" width="0.0579%" height="15" fill="rgb(209,9,3)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="143.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="99.1893%" y="117" width="0.0579%" height="15" fill="rgb(230,59,30)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="99.1893%" y="101" width="0.0579%" height="15" fill="rgb(209,121,21)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="99.1893%" y="85" width="0.0579%" height="15" fill="rgb(220,109,13)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.06%)</title><rect x="99.1893%" y="69" width="0.0579%" height="15" fill="rgb(232,18,1)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.06%)</title><rect x="99.1893%" y="53" width="0.0579%" height="15" fill="rgb(215,41,42)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="99.1893%" y="37" width="0.0579%" height="15" fill="rgb(224,123,36)" fg:x="1713" fg:w="1"/><text x="99.4393%" y="47.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2 samples, 0.12%)</title><rect x="99.1893%" y="357" width="0.1158%" height="15" fill="rgb(240,125,3)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2 samples, 0.12%)</title><rect x="99.1893%" y="341" width="0.1158%" height="15" fill="rgb(205,98,50)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2 samples, 0.12%)</title><rect x="99.1893%" y="325" width="0.1158%" height="15" fill="rgb(205,185,37)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="335.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2 samples, 0.12%)</title><rect x="99.1893%" y="309" width="0.1158%" height="15" fill="rgb(238,207,15)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2 samples, 0.12%)</title><rect x="99.1893%" y="293" width="0.1158%" height="15" fill="rgb(213,199,42)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2 samples, 0.12%)</title><rect x="99.1893%" y="277" width="0.1158%" height="15" fill="rgb(235,201,11)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2 samples, 0.12%)</title><rect x="99.1893%" y="261" width="0.1158%" height="15" fill="rgb(207,46,11)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.12%)</title><rect x="99.1893%" y="245" width="0.1158%" height="15" fill="rgb(241,35,35)" fg:x="1713" fg:w="2"/><text x="99.4393%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (1 samples, 0.06%)</title><rect x="99.2472%" y="229" width="0.0579%" height="15" fill="rgb(243,32,47)" fg:x="1714" fg:w="1"/><text x="99.4972%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (1 samples, 0.06%)</title><rect x="99.2472%" y="213" width="0.0579%" height="15" fill="rgb(247,202,23)" fg:x="1714" fg:w="1"/><text x="99.4972%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (1 samples, 0.06%)</title><rect x="99.2472%" y="197" width="0.0579%" height="15" fill="rgb(219,102,11)" fg:x="1714" fg:w="1"/><text x="99.4972%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.06%)</title><rect x="99.3052%" y="341" width="0.0579%" height="15" fill="rgb(243,110,44)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="351.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.06%)</title><rect x="99.3052%" y="325" width="0.0579%" height="15" fill="rgb(222,74,54)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="335.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.06%)</title><rect x="99.3052%" y="309" width="0.0579%" height="15" fill="rgb(216,99,12)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="319.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.06%)</title><rect x="99.3052%" y="293" width="0.0579%" height="15" fill="rgb(226,22,26)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="303.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.06%)</title><rect x="99.3052%" y="277" width="0.0579%" height="15" fill="rgb(217,163,10)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="287.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.06%)</title><rect x="99.3052%" y="261" width="0.0579%" height="15" fill="rgb(213,25,53)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="271.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.06%)</title><rect x="99.3052%" y="245" width="0.0579%" height="15" fill="rgb(252,105,26)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="255.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.06%)</title><rect x="99.3052%" y="229" width="0.0579%" height="15" fill="rgb(220,39,43)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="239.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.06%)</title><rect x="99.3052%" y="213" width="0.0579%" height="15" fill="rgb(229,68,48)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="223.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchLists:] (1 samples, 0.06%)</title><rect x="99.3052%" y="197" width="0.0579%" height="15" fill="rgb(252,8,32)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="207.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.06%)</title><rect x="99.3052%" y="181" width="0.0579%" height="15" fill="rgb(223,20,43)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="191.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource addManagedSourceForIdentifier:user:] (1 samples, 0.06%)</title><rect x="99.3052%" y="165" width="0.0579%" height="15" fill="rgb(229,81,49)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="175.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withManagedSourceForIdentifier:user:perform:] (1 samples, 0.06%)</title><rect x="99.3052%" y="149" width="0.0579%" height="15" fill="rgb(236,28,36)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="159.50"></text></g><g><title>CoreFoundation`CFStringCreateWithFormat (1 samples, 0.06%)</title><rect x="99.3052%" y="133" width="0.0579%" height="15" fill="rgb(249,185,26)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="143.50"></text></g><g><title>CoreFoundation`CFStringCreateWithFormatAndArguments (1 samples, 0.06%)</title><rect x="99.3052%" y="117" width="0.0579%" height="15" fill="rgb(249,174,33)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="127.50"></text></g><g><title>CoreFoundation`_CFStringCreateWithFormatAndArgumentsReturningMetadata (1 samples, 0.06%)</title><rect x="99.3052%" y="101" width="0.0579%" height="15" fill="rgb(233,201,37)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="111.50"></text></g><g><title>CoreFoundation`__CFStringAppendFormatCore (1 samples, 0.06%)</title><rect x="99.3052%" y="85" width="0.0579%" height="15" fill="rgb(221,78,26)" fg:x="1715" fg:w="1"/><text x="99.5552%" y="95.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.06%)</title><rect x="99.3631%" y="293" width="0.0579%" height="15" fill="rgb(250,127,30)" fg:x="1716" fg:w="1"/><text x="99.6131%" y="303.50"></text></g><g><title>colors`fontdb::collect_families (1 samples, 0.06%)</title><rect x="99.3631%" y="277" width="0.0579%" height="15" fill="rgb(230,49,44)" fg:x="1716" fg:w="1"/><text x="99.6131%" y="287.50"></text></g><g><title>colors`fontdb::name_to_unicode (1 samples, 0.06%)</title><rect x="99.3631%" y="261" width="0.0579%" height="15" fill="rgb(229,67,23)" fg:x="1716" fg:w="1"/><text x="99.6131%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="99.3631%" y="245" width="0.0579%" height="15" fill="rgb(249,83,47)" fg:x="1716" fg:w="1"/><text x="99.6131%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="99.3631%" y="229" width="0.0579%" height="15" fill="rgb(215,43,3)" fg:x="1716" fg:w="1"/><text x="99.6131%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="99.3631%" y="213" width="0.0579%" height="15" fill="rgb(238,154,13)" fg:x="1716" fg:w="1"/><text x="99.6131%" y="223.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (3 samples, 0.17%)</title><rect x="99.3631%" y="309" width="0.1737%" height="15" fill="rgb(219,56,2)" fg:x="1716" fg:w="3"/><text x="99.6131%" y="319.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.12%)</title><rect x="99.4210%" y="293" width="0.1158%" height="15" fill="rgb(233,0,4)" fg:x="1717" fg:w="2"/><text x="99.6710%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.12%)</title><rect x="99.4210%" y="277" width="0.1158%" height="15" fill="rgb(235,30,7)" fg:x="1717" fg:w="2"/><text x="99.6710%" y="287.50"></text></g><g><title>colors`memmap2::os::MmapInner::map (1 samples, 0.06%)</title><rect x="99.5947%" y="277" width="0.0579%" height="15" fill="rgb(250,79,13)" fg:x="1720" fg:w="1"/><text x="99.8447%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.06%)</title><rect x="99.5947%" y="261" width="0.0579%" height="15" fill="rgb(211,146,34)" fg:x="1720" fg:w="1"/><text x="99.8447%" y="271.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (5 samples, 0.29%)</title><rect x="99.5368%" y="293" width="0.2895%" height="15" fill="rgb(228,22,38)" fg:x="1719" fg:w="5"/><text x="99.7868%" y="303.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (3 samples, 0.17%)</title><rect x="99.6526%" y="277" width="0.1737%" height="15" fill="rgb(235,168,5)" fg:x="1721" fg:w="3"/><text x="99.9026%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__open (3 samples, 0.17%)</title><rect x="99.6526%" y="261" width="0.1737%" height="15" fill="rgb(221,155,16)" fg:x="1721" fg:w="3"/><text x="99.9026%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.06%)</title><rect x="99.8263%" y="293" width="0.0579%" height="15" fill="rgb(215,215,53)" fg:x="1724" fg:w="1"/><text x="100.0763%" y="303.50"></text></g><g><title>colors`std::rt::lang_start::_{{closure}} (1,726 samples, 99.94%)</title><rect x="0.0000%" y="421" width="99.9421%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="1726"/><text x="0.2500%" y="431.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (1,726 samples, 99.94%)</title><rect x="0.0000%" y="405" width="99.9421%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="1726"/><text x="0.2500%" y="415.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (1,726 samples, 99.94%)</title><rect x="0.0000%" y="389" width="99.9421%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="1726"/><text x="0.2500%" y="399.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (13 samples, 0.75%)</title><rect x="99.1893%" y="373" width="0.7528%" height="15" fill="rgb(234,150,53)" fg:x="1713" fg:w="13"/><text x="99.4393%" y="383.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (11 samples, 0.64%)</title><rect x="99.3052%" y="357" width="0.6369%" height="15" fill="rgb(228,201,54)" fg:x="1715" fg:w="11"/><text x="99.5552%" y="367.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (10 samples, 0.58%)</title><rect x="99.3631%" y="341" width="0.5790%" height="15" fill="rgb(222,22,37)" fg:x="1716" fg:w="10"/><text x="99.6131%" y="351.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (10 samples, 0.58%)</title><rect x="99.3631%" y="325" width="0.5790%" height="15" fill="rgb(237,53,32)" fg:x="1716" fg:w="10"/><text x="99.6131%" y="335.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (7 samples, 0.41%)</title><rect x="99.5368%" y="309" width="0.4053%" height="15" fill="rgb(233,25,53)" fg:x="1719" fg:w="7"/><text x="99.7868%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.06%)</title><rect x="99.8842%" y="293" width="0.0579%" height="15" fill="rgb(210,40,34)" fg:x="1725" fg:w="1"/><text x="100.1342%" y="303.50"></text></g><g><title>all (1,727 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="1727"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld`start (1,727 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="1727"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>colors`main (1,727 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="1727"/><text x="0.2500%" y="463.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (1,727 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="1727"/><text x="0.2500%" y="447.50">colors`std::rt::lang_start_internal</text></g><g><title>libsystem_pthread.dylib`pthread_get_stacksize_np (1 samples, 0.06%)</title><rect x="99.9421%" y="421" width="0.0579%" height="15" fill="rgb(235,212,8)" fg:x="1726" fg:w="1"/><text x="100.1921%" y="431.50"></text></g></svg></svg>